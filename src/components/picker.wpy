<style lang="less">
  @import "../styles/mixins/common";

  .picker {
    flex: 1;
    width: 100%;
    padding: 6px 12px;
    font-size: 14px;
    background-color: #fff;
    box-sizing: border-box;
    .flex-v-center();
    justify-content: space-between;

    &:active {
      background-color: @color-active;
    }

    &.bordered {
      border: .5px solid @border-color;
      border-radius: 4px;
    }

    &.disabled {
      opacity: 0.7;
      pointer-events: none;
    }

    &.large {
      height: @large;
      font-size: 16px;
    }

    &.normal {
      height: @normal;
    }

    &.small {
      height: @small;
    }

    .placeholder {
      color: #999;
    }

    .picker-actions {
      .flex-v-center();
      margin-left: 5px;
    }
  }
</style>

<template>
  <picker
    mode="selector"
    @change="change"
    @columnchange="columnChange"
    class="{{disabled ? 'disabled' : ''}}"
    value="{{selectIndex}}"
    range="{{items}}"
    disabled="{{disabled}}"
  >
    <view class="picker {{size}} {{bordered ? 'bordered' : ''}} {{className}}" style="{{style}}" wx:if="{{!useSlot}}">
      <text class="placeholder" wx:if="{{placeholder && range[selectIndex].value === ''}}">{{placeholder}}</text>
      <text>{{items[selectIndex]}}</text>
      <view class="picker-actions">
        <view class="iconfont icon-close-circle" style="color: #999;margin-right: 5px;" catchtap="reset" wx:if="{{resetable && range[selectIndex].value !== ''}}"></view>
        <icon name="arrow-down" size="mini" color="#999"></icon>
      </view>
    </view>
    <slot wx:else></slot>
  </picker>
</template>

<script>
  import wepy from 'wepy'
  import Icon from './icon'

  const coerce = (v) =>
    typeof v === 'string'
      ? JSON.parse(v)
      : v

  export default class Index extends wepy.component {
    props = {
      style: {
        type: String,
        default: ''
      },
      className: {
        type: String,
        default: ''
      },
      size: {
        type: String,
        default: 'normal'
      },
      range: {
        type: Array,
        default: []
      },
      value: {
        type: [String, Number]
      },
      disabled: {
        type: [Boolean, String],
        default: false,
        coerce
      },
      bordered: {
        type: [Boolean, String],
        default: true,
        coerce
      },
      placeholder: String,
      useSlot: {
        type: [Boolean, String],
        default: false,
        coerce
      },
      resetable: {
        type: [Boolean, String],
        default: false,
        coerce
      }
    }

    components = {
      icon: Icon
    }

    data = {
      selectIndex: 0
    }

    computed = {
      items () {
        return this.data.range.map(item => item.text)
      }
    }

    watch = {
      value (val) {
        this.setSelectIndex(val)
      }
    }

    methods = {
      change (e) {
        const { value } = e.detail
        const valueObj = this.range[value]
        this.value = valueObj.value
        this.$emit('change', valueObj.value, valueObj.text, value, e)
      },
      columnChange (e) {
        const {column, value} = e.detail
        this.$emit('columnchange', column, value)
      },
      reset () {
        this.value = ''
        const valueObj = this.range[0]
        this.$emit('change', valueObj.value, valueObj.text, 0)
      }
    }

    setSelectIndex (value) {
      const index = this.range.findIndex(item => item.value === value)
      this.selectIndex = index < 0 ? 0 : index
      this.$apply()
    }
  }
</script>
