<style lang="less">
  @import "../styles/mixin";

  .button {
    .flex-center();
    padding-left: 40rpx;
    padding-right: 40rpx;
    flex-direction: row;
    color: #444;
    font-size: 28rpx;
    box-sizing: border-box;

    > .icon {
      margin-right: 6rpx;
    }

    &.circled {
      border-radius: @large;
    }

    &.inline {
      display: inline-flex;
    }

    &.primary {
      color: #fff;
      &:not(.bordered) {
        .g-gradient();

        &:active {
          .g-darken-gradient();
        }
      }

      &.bordered {
        color: @gcolor;
        border: 1rpx solid @gcolor;

        &:active {
          color: darken(@gcolor, 10%);
          border-color: darken(@gcolor, 10%);
        }
      }
    }

    &.success {
      color: #fff;

      &:not(.bordered) {
        background-color: @color-success;

        &:active {
          background-color: darken(@color-success, 10%);
        }
      }

      &.bordered {
        color: @color-success;
        border: 1rpx solid @color-success;

        &:active {
          color: darken(@color-success, 10%);
          border-color: darken(@color-success, 10%);
        }
      }
    }

    &.info {
      color: #fff;

      &:not(.bordered) {
        background-color: @color-info;

        &:active {
          background-color: darken(@color-info, 10%);
        }
      }

      &.bordered {
        color: @color-info;
        border: 1rpx solid @color-info;

        &:active {
          color: darken(@color-info, 10%);
          border-color: darken(@color-info, 10%);
        }
      }
    }

    &.warning {
      color: #fff;

      &:not(.bordered) {
        background-color: @color-warning;

        &:active {
          background-color: darken(@color-warning, 10%);
        }
      }

      &.bordered {
        color: @color-warning;
        border: 1rpx solid @color-warning;

        &:active {
          color: darken(@color-warning, 10%);
          border-color: darken(@color-warning, 10%);
        }
      }
    }

    &.danger {
      color: #fff;

      &:not(.bordered) {
        background-color: @color-danger;

        &:active {
          background-color: darken(@color-danger, 10%);
        }
      }

      &.bordered {
        color: @color-danger;
        border: 1rpx solid @color-danger;

        &:active {
          color: darken(@color-danger, 10%);
          border-color: darken(@color-danger, 10%);
        }
      }
    }

    &.default {
      background-color: @color-default;
      &:active {
        background-color: darken(@color-default, 10%);
      }
    }

    &.plain {
      background-color: transparent;
      border: 1rpx solid @color-border;

      &:active {
        border-color: darken(@color-border, 10%);
      }
    }

    &.disabled {
      background-color: @color-disabled;
      pointer-events: none;
    }

    &.large {
      height: @large;
      font-size: 32rpx;
    }

    &.normal {
      height: @normal;
    }

    &.small {
      height: @small;
      padding-left: 30rpx;
      padding-right: 30rpx;
    }

  }
</style>

<template>
  <view class="button {{inline ? 'inline' : ''}} {{circled ? 'circled' : ''}} {{bordered ? 'bordered' : ''}} {{size}} {{type}} {{disabled ? 'disabled' : ''}}" style="{{style}}" @tap="tap">
    <icon wx:if="{{icon}}" :type="iconType" :name="icon" :size="size"></icon>
    <slot></slot>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import Icon from './icon'

  const coerce = t =>
    typeof t === 'string' ? JSON.parse(t) : t

  export default class Button extends wepy.component {
    props = {
      style: {
        type: String,
        default: ''
      },
      icon: {
        type: String,
        default: ''
      },
      size: {
        type: String,
        default: 'normal'
      },
      type: {
        type: String,
        default: 'primary'
      },
      inline: {
        type: [Boolean, String],
        default: false,
        coerce: coerce
      },
      disabled: {
        type: [Boolean, String],
        default: false,
        coerce: coerce
      },
      bordered: {
        type: [Boolean, String],
        default: false,
        coerce: coerce
      },
      circled: {
        type: [Boolean, String],
        default: true,
        coerce: coerce
      },
      iconType: String
    }

    components = {
      icon: Icon
    }

    data = {}

    methods = {
      tap($event) {
        this.$emit('tap', $event)
      }
    }
  }
</script>
