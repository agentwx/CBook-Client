<style lang="less">
  @import "../less/mixin";

  .notice {
    .flex-v-center();
    padding: 16rpx;
    background-color: #fff;

    &:active {
      background-color: #f2f2f2;
    }
  }
  .notice-messages{
    flex: 1;
    height: 72rpx;
    overflow: hidden;
  }
  .notice-item {
    .flex-v-center();
    height: 72rpx;
  }
  .notice-scroller {
    transition-property: all;
    transition-timing-function: ease-in-out;
  }
</style>

<template>
  <view class="notice" style="{{style}}">
    <icon name="notice.svg"></icon>
    <view class="notice-messages">
      <view class="notice-scroller" style="transform: translateY({{y}}%); transition-duration: {{speed}}ms;">
        <repeat for="{{notices}}" key="index">
          <view class="notice-item" @tap="noticeTap({{item}})">{{item.title}}</view>
        </repeat>
      </view>
    </view>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import Icon from './icon'

  export default class Notice extends wepy.component {
    props = {
      style: {
        type: String,
        default: ''
      },
      notices: {
        type: Array,
        default: []
      },
      delay: {
        type: Number,
        default: 4000
      },
      speed: {
        type: Number,
        default: 600
      }
    }

    intervalId = null
    timeoutId = null
    _speed = 0
    _notices = []

    components = {
      icon: Icon
    }

    data = {
      y: 0
    }

    methods = {
      noticeTap (item, e) {
        let index = -1
        for (let i = 0; i < this._notices.length; i++) {
          if (this._notices[i].title === item.title) {
            index = i
            break
          }
        }
        this.$emit('tap', index, this._notices[index], e)
      }
    }

    doScroll () {
      if (this.notices.length < 2) return
      this.y = -this._cacOffset()
      this.speed = this._speed
      this.$apply()
      this.timeoutId = setTimeout(() => {
        this.next()
      }, this._speed)
    }

    startScroll () {
      this.intervalId = setTimeout(() => {
        this.doScroll()
        this.startScroll()
      }, this.delay)
    }

    stopScroll () {
      if (this.intervalId) {
        clearTimeout(this.intervalId)
        this.intervalId = null
      }
      if (this.timeoutId) {
        clearTimeout(this.timeoutId)
        this.timeoutId = null
      }
      this.reset()
    }

    next () {
      this.y = 0
      this.speed = 0
      this.notices.push(this.notices.shift())
      this.$apply()
    }

    reset () {
      this.y = 0
      this.speed = this._speed
      this.notices = this._notices.slice()
      this.$apply()
    }

    _cacOffset() {
      return this.notices.length > 1 ? (1 / this.notices.length) * 100 : 0
    }

    init () {
      if (this._speed === 0) {
        this._speed = this.speed
      }
      this._notices = this.notices.slice()
    }
  }
</script>
