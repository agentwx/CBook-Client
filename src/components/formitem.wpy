<style lang="less">
  @import "../styles/mixin";

  .form-item {
    background-color: #fff;

    &:not(.nomargin) {
      margin-bottom: 10px;
    }
  }

  .form-item-inner {
    .flex-v-center();
    margin-left: 15px;
    margin-right: 15px;
    padding-top: 5px;
    padding-bottom: 5px;

    &.underline {
      border-bottom: .5px solid @color-underline;
    }
  }

  .form-item-label {
    display: inline-block;
    white-space: nowrap;
    margin-right: 8px;
    color: #888;
  }

  .form-item-bd {
    position: relative;
    background-color: #fff;
    border-radius: 4px;
    flex: 1;
    .flex-v-center();

    > .input {
      width: 100%;
      padding: 6px 12px;
      font-size: 14px;
      box-sizing: border-box;
      flex: 1;

      &.large {
        height: @large;
        font-size: 16px;
      }

      &.normal {
        height: @normal;
      }

      &.medium {
        height: @medium;
      }

      &.small {
        height: @small;
      }
    }

    > .icon-left {
      margin-left: 6px;
      margin-right: -9px;
    }

    > .icon-right {
      display: flex;
      align-items: center;
      margin-left: -6px;
      margin-right: 3px;
    }

    .ctrl-icon {
      padding: 3px;
      margin-left: 2px;
      color: #8a8a8a;
    }

    .pwd-ctrl {
      font-size: 18px;
    }

    &.bordered {
      border: .5px solid @color-border;
    }
  }
</style>
<template>
  <view class="form-item {{nomargin ? 'nomargin' : ''}}" style="{{style}}">
    <view class="form-item-inner {{underline ? 'hairline--bottom' : ''}}">
      <text wx:if="{{label}}" class="form-item-label" style="width:{{labelWidth}};">{{label}}</text>
      <view class="form-item-bd {{bordered ? 'bordered' : ''}}">
        <icon wx:if="{{icon}}" class="icon-left" :type="iconType" color="#999" :name="icon" :size="size"/>
        <input password="{{password}}" type="{{type}}" class="input {{size}}" focus="{{focus}}" disabled="{{disabled}}"
               placeholder="{{placeholder}}" placeholder-class="{{placeholderClass}}" confirm-type="{{confirmType}}" value="{{value}}" maxlength="{{maxlength}}" @tap="tap" @change="change" @input="input"
               @focus="focus" @blur="blur" @confirm="confirm" style="text-align:{{textAlign}}"/>
        <view class="icon-right" wx:if="{{resetable || secretive}}">
          <view class="ctrl-icon iconfont icon-close-circle" wx:if="{{resetable}}" @tap="reset"
                style="display: {{shouldClearShow ? '' : 'none'}}">
          </view>
          <view class="ctrl-icon pwd-ctrl iconfont icon-{{eyeName}}" wx:if="{{secretive}}" @tap="togglePwdVisible">
          </view>
        </view>
      </view>
    </view>
  </view>
</template>
<script>
  import wepy from 'wepy'
  import Icon from './icon'

  const coerce = t =>
    typeof t === 'string' ? JSON.parse(t) : t

  export default class Index extends wepy.component {
    props = {
      style: {
        type: String,
        default: ''
      },
      placeholderClass: {
        type: String,
        default: 'input-placeholder'
      },
      type: {
        type: String,
        default: 'text'
      },
      confirmType: {
        type: String,
        default: 'done'
      },
      label: String,
      icon: String,
      iconType: String,
      labelWidth: {
        type: String,
        default: ''
      },
      size: {
        type: String,
        default: 'normal'
      },
      value: {
        type: [String, Number],
        default: '',
        twoWay: true
      },
      maxlength: {
        type: [String, Number],
        default: -1,
        coerce: v => +v
      },
      placeholder: {
        type: String,
        default: ''
      },
      textAlign: {
        type: String,
        default: 'left'
      },
      bordered: {
        type: [Boolean, String],
        default: true,
        coerce
      },
      resetable: {
        type: [Boolean, String],
        default: false,
        coerce
      },
      secretive: {
        type: [Boolean, String],
        default: false,
        coerce
      },
      nomargin: {
        type: [Boolean, String],
        default: false,
        coerce
      },
      underline: {
        type: [Boolean, String],
        default: false,
        coerce
      },
      password: {
        type: String,
        default: false,
        coerce
      },
      focus: {
        type: [Boolean, String],
        default: false,
        coerce
      },
      disabled: {
        type: [Boolean, String],
        default: false,
        coerce
      }
    }

    components = {
      icon: Icon,
      iconclear: Icon,
      iconeye: Icon
    }

    data = {
    }

    computed = {
      shouldClearShow() {
        return this.resetable ? this.value !== '' : false
      },
      eyeName() {
        return this.password ? 'eye-closed' : 'eye-opened'
      }
    }

    methods = {
      togglePwdVisible() {
        this.password = !this.password
      },
      tap(e) {
        this.$emit('tap', e.detail.value, e)
      },
      change (e) {
        this.$emit('change', e.detail.value, e)
      },
      input(e) {
        this.$emit('input', e.detail.value, e)
      },
      focus(e) {
        this.$emit('focus', e.detail.value, e)
      },
      blur(e) {
        this.$emit('blur', e.detail.value, e)
      },
      confirm(e) {
        this.$emit('confirm', e.detail.value, e)
      },
      reset() {
        this.value = ''
        this.$emit('change', '')
        this.$emit('input', '')
      }
    }
  }
</script>
