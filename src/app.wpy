<style lang="less">
  @import "less/font";
  @import "less/mixin";
  @import "less/hairline";
  @import "less/iconfont";
  @import "less/animation";

  page {
    background-color: #fff;
    color: #444;
    font-size: 28rpx;
    line-height: 1.42;
    font-family: -apple-system-font, 'Helvetica Neue', Helvetica, 'Microsoft YaHei', sans-serif;
  }

  image {
    vertical-align: top;
  }

  .input-placeholder {
    color: #999;
  }

  .iconfont {
    font-size: 32rpx;
    line-height: 1;
    font-weight: normal;
  }

  page, view, text, scroll-view, input, textarea, button, form, image {
    -webkit-box-sizing: border-box;
    box-sizing: border-box;
  }

  .panel-title {
    font-size: 30rpx;
    font-weight: bold;
    margin-bottom: 20rpx;
    display: flex;
    justify-content: space-between;
  }

  .panel-footer {
    position: relative;
    padding-top: 24rpx;
    display: flex;
    justify-content: space-between;

    &:after {
      .hairline-top();
    }
  }

  .spliter {
    height: 20rpx;
    background-color: #f5f5f5;
  }
</style>

<script>
import './pollyfill'
import wepy from 'wepy'
import 'wepy-async-function'
import { toast } from './utils/util'
import {
  login, isAuthorized, getUserInfo,
  getWxUserInfo, getOpenIdByCode, getUserToken
} from './utils/wechat'

import { setStore } from 'wepy-redux'
import configStore from './store'

const initialState = wx.getStorageSync('APP_INIT_STATE') || {}
const store = configStore(initialState)
setStore(store)

store.subscribe(() => {
  let state = store.getState()
  wx.setStorageSync('APP_INIT_STATE', state)
})

export default class extends wepy.app {
  config = {
    pages: [
      'pages/home/home',
      'pages/search/search',
      'pages/detail/detail',
      'pages/recycle/index',
      'pages/recycle/list',
      'pages/recycle/detail',
      'pages/shopcart/shopcart',
      'pages/order/order',
      'pages/orderlist/orderlist',
      'pages/my/my',
      'pages/profile/profile',
      'pages/profile/add',
      'pages/address/address',
      'pages/address/new_address',
      'pages/auth/auth'
    ],
    window: {
      navigationBarBackgroundColor: '#fff',
      navigationBarTextStyle: 'black',
      navigationBarTitleText: '星月童书',
      backgroundColor: '#f7f7f7',
      backgroundTextStyle: 'dark',
      enablePullDownRefresh: false
    },
    networkTimeout: {
      request: 60000,
      connectSocket: 60000,
      uploadFile: 60000,
      downloadFile: 60000
    },
    debug: false,
    tabBar: {
      color: '#666',
      selectedColor: '#01AAfA',
      borderStyle: '#ddd',
      backgroundColor: '#fff',
      list: [
        {
          text: '首页',
          pagePath: 'pages/home/home',
          iconPath: 'images/home.png',
          selectedIconPath: 'images/home-selected.png'
        },
        {
          text: '回收书',
          pagePath: 'pages/recycle/index',
          iconPath: 'images/recycle.png',
          selectedIconPath: 'images/recycle-selected.png'
        },
        {
          text: '购物车',
          pagePath: 'pages/shopcart/shopcart',
          iconPath: 'images/cart.png',
          selectedIconPath: 'images/cart-selected.png'
        },
        {
          text: '我的',
          pagePath: 'pages/my/my',
          iconPath: 'images/my.png',
          selectedIconPath: 'images/my-selected.png'
        }
      ]
    }
  }

  appReady = false
  readyCallback = null

  constructor () {
    super()
    this.use('requestfix')
    this.use('promisify')
  }

  onLaunch() {
    this.wxlogin()

    const { recycles, shopcart } = initialState

    if (recycles && recycles.length > 0) {
      wx.setTabBarBadge({
        index: 1,
        text: recycles.length.toString()
      })
    }

    if (shopcart && shopcart.length > 0) {
      const total = shopcart.reduce((prev, cur) => prev + cur.COUNT, 0)
      wx.setTabBarBadge({
        index: 2,
        text: total.toString()
      })
    }

    wepy.getSystemInfo().then(res => {
      const SDKVersion = parseFloat(res.SDKVersion.replace(/\./g, ''))
      if (SDKVersion < 223) {
        wx.showModal({
          content: '您当前版本的微信不能满足本小程序的运行要求，请升级!',
          showCancel: false
        })
      }
    })
  }

  sleep (s) {
    return new Promise(resolve => {
      setTimeout(() => {
        resolve()
      }, s * 1000)
    })
  }

  async wxlogin () {
    try {
      const code = await login()
      const {openid, unionid} = await getOpenIdByCode(code)
      this.openId = openid
      if (unionid) {
        const tokenData = getUserToken(openid, unionid)
        this.saveToken(tokenData.datas.token)
      } else {
        this.doAuthorize()
      }
    } catch (msg) {
      toast.error(msg)
    }
  }

  async getUnionId () {
    try {
      const { encryptedData, iv } = await getUserInfo({withCredentials: true, lang: 'zh_CN'})
      const res = await getWxUserInfo(this.openId, encryptedData, iv)
      store.dispatch({
        type: 'ADD_USER_INFO',
        payload: {
          data: res.datas
        }
      })
      return res.datas
    } catch (errMsg) {
      toast.error(errMsg)
      return {}
    }
  }

  async getToken() {
    const { unionId } = await this.getUnionId()
    if (!unionId) {
      wx.showModal({
        content: '抱歉，未找到您的unionId',
        showCancel: false,
        success: res => {
          this.doAuthorize()
        }
      })
    } else {
      const tokenData = await getUserToken(this.openId, unionId)
      this.saveToken(tokenData.datas.token)
    }
  }

  async doAuthorize () {
    const isAuthored = await isAuthorized()
    if (isAuthored) {
      this.getToken()
    } else {
      wx.navigateTo({url: '/pages/auth/auth'})
    }
  }

  saveToken (token) {
    wx.setStorageSync('token', token)
    this.dispatchReady()
  }

  ready (callback) {
    this.readyCallback = callback
    if (this.appReady) {
      this.dispatchReady()
    }
  }
  dispatchReady () {
    this.appReady = true
    if (typeof this.readyCallback === 'function') {
      this.readyCallback.apply(this, arguments)
      this.readyCallback = null
    }
  }
}
</script>
