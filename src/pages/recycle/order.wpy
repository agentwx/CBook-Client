<style lang="less">
  @import '../../less/mixin';

  .orders-wrap {
    margin-top: 40rpx;
  }

  .panel {
    padding-top: 0;
    padding-bottom: 0;
  }

  .order-body {
    .flex();
  }

  .order-cover {
    width: 160rpx;
    height: 196rpx;
    margin-right: 30rpx;
    overflow: hidden;

    image {
      width: 100%;
      height: 100%;
    }
  }

  .order-main {
    flex: 1;
    .flex-h-center();
    flex-direction: column;
    justify-content: space-between;
  }

  .order-pd-hd {
    .title {
      font-weight: bold;
      font-size: 30rpx;
      margin-bottom: 6rpx;
    }

    .desc {
      color: #999;
    }
  }

  .order-pd-specs {
    .price {
      font-size: 30rpx;
    }

    .discount {
      margin-left: 30rpx;
      color: #777;
      font-size: 26rpx;
    }
  }

  .recycle-action-bar {
    position: fixed;
    left: 0;
    right: 0;
    bottom: 0;
    height: 100rpx;
    background-color: #fff;
    box-shadow: 0 -16rpx 36rpx rgba(0,0,0,.04);
    .flex();
  }

  .recycle-info-tip {
    flex: 1;
    .flex();
    flex-direction: column;
    justify-content: center;
    padding-left: 24rpx;

    .income {
      font-size: 30rpx;
    }

    .hint {
      color: #999;
      font-size: 24rpx;
    }
  }

  .action-button {
    .g-gradient(50%);
    .flex-center();
    color: #fff;
    font-size: 32rpx;
    padding-left: 40rpx;
    padding-right: 40rpx;

    &:active {
      .g-darken-gradient(50%);
    }
  }

  .float-action-bar {
    position: fixed;
    right: 40rpx;
    bottom: 200rpx;
  }

  .float-button {
    padding: 20rpx;
    margin-top: 40rpx;
    border-radius: 50%;
    box-shadow: 0 0 32rpx rgba(8,175,254,.4);
    background-color: #fdfdfd;

    &:active {
      background-color: darken(#fdfdfd, 10%);
    }

    > text {
      display: inline-block;
      width: 2.5em;
      height: 2.5em;
      text-align: center;
      font-size: 24rpx;
      line-height: 1.2;
    }

    &.primary {
      color: #fff;
      background-color: @gcolor;

      &:active {
        background-color: darken(@gcolor, 10%);
      }
    }
  }
</style>

<template>
  <alert showArrow="false">继续扫码，还需5本或预计收入满200元即可下单</alert>

  <view class="orders-wrap">
    <repeat for="{{products}}">
      <panel>
        <view class="order-body">
          <view class="order-cover">
            <image src="{{item.smallImageUrl}}" layload="true"></image>
          </view>
          <view class="order-main">
            <view class="order-pd-hd">
              <view class="title">{{item.name}}</view>
              <view class="desc">规格：默认</view>
            </view>
            <view class="order-pd-specs">
              <text class="price">￥{{item.costPrice}}</text>
            </view>
          </view>
        </view>
      </panel>
    </repeat>
  </view>

  <view class="float-action-bar">
    <view class="float-button" @tap="manualInput">
      <text>手动输入</text>
    </view>
    <view class="float-button primary" @tap="scanBarcode">
      <text>扫码卖书</text>
    </view>
  </view>

  <view class="recycle-action-bar">
    <view class="recycle-info-tip">
      <view class="income">预计收入￥{{totalPrice}}</view>
      <view class="hint">请继续扫描哦~</view>
    </view>
    <view class="action-button" @tap="nextStep">下一步({{totalCount}})</view>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import Alert from '@/components/alert'
  import Panel from '@/components/panel'
  import fetch from '../../service/fetch'
  import { toast } from '../../utils/util'

  import {getStore} from 'wepy-redux'

  const store = getStore()

  export default class Index extends wepy.page {
    config = {
      navigationBarTitleText: '回收给星月童书'
    }

    components = {
      alert: Alert,
      panel: Panel
    }

    computed = {
      totalPrice () {
        return this.products.reduce((prev, cur) => prev + cur.costPrice, 0)
      },
      totalCount () {
        return this.products.length
      }
    }

    data = {
      products: []
    }

    methods = {
      manualInput () {
        this.$navigate('/pages/recycle/manual')
      },
      async scanBarcode () {
        const { result } = await wepy.scanCode()
        this.queryBookInfo(result)
      },
      nextStep () {
        this.$navigate('/pages/order/order', {orderSource: 'recycle', products: JSON.stringify(this.products)})
      }
    }

    async queryBookInfo (isbn) {
      const isExist = this.products.find(item => item.isbn === isbn)
      if (isExist) {
        return toast.error('该图书已经扫描过')
      }
      let res = await fetch.post('/bookinfo/base', { isbn })
      store.dispatch({
        type: 'ADD_RECYCLE',
        payload: {
          product: res.datas
        }
      })
      this.loadRecycles()
    }

    loadRecycles () {
      const { recycles } = store.getState()
      this.products = recycles.list.map(item => ({...item, COUNT: 1}))
      this.$apply()
    }

    clear () {
      store.dispatch({
        type: 'CLEAR_RECYCLE'
      })
      this.products = []
      this.$apply()
    }

    onShow() {
      this.loadRecycles()
    }
  }
</script>
