<style lang="less">
  @import '../../styles/mixins/common';
  @import '../../styles/mixins/ellipsis';

  page {
    background-color: #f7f7f7;
  }

  .delivery-body {
    .flex-v-center();

    .geo-icon {
      margin-right: 10px;
    }
  }

  .delivery-hd {
    font-weight: bold;
    margin-bottom: 4px;

    .username {
      margin-right: 10px;
    }
  }

  .delivery-address,
  .delivery-picktime {
    color: #888;
    font-size: 13px;
    margin-bottom: 4px;
  }

  .book-body {
    .flex();
    padding-top: 8px;
    padding-bottom: 8px;
  }

  .book-cover {
    .flex-center();
    width: 80px;
    height: 98px;
    margin-right: 15px;
    overflow: hidden;

    image {
      width: 100%;
      height: 100%;
    }
  }

  .book-main {
    flex: 1;
    width: 100%;
    overflow: hidden;
    .flex-h-center();
    flex-direction: column;
    justify-content: space-between;
  }

  .book-hd {
    .title {
      .ellipsis();
      font-size: 15px;
      font-weight: bold;
      margin-bottom: 3px;
    }

    .desc {
      .light-font();
      .ellipsis();
      font-size: 12px;
      color: #999;
      margin-bottom: 2px;
    }
  }

  .book-specs {
    .flex();
    justify-content: space-between;

    .price {
      font-size: 15px;
    }

    .status {
      color: #09c8fe;

      &.red {
        color: #ff0000;
      }
    }
  }

  .book-title {
    .flex-v-center();

    .icon {
      margin-right: 5px;
    }
  }

  .delivery-panel,
  .income-panel {
    padding-top: 0 !important;
    padding-bottom: 0 !important;
  }

  .income-item {
    .flex();
    justify-content: space-between;
    padding: 3px 0;

    /*&:first-child {
      color: #888;
    }

    &:last-child {
      font-weight: bold;
    }*/
  }

  .order-panel {
    padding-top: 0;
    padding-bottom: 0;
  }

  .order-item {
    .flex-v-center();
    justify-content: space-between;
    padding: 2px 0;
    color: #888;
  }

  .copy-text {
    padding: 3px 8px;
  }

  .action-button {
    padding-top: 10px;
    padding-bottom: 10px;
    margin-bottom: 10px;
    background-color: #fff;
    .flex-center();

    &:active {
      background-color: @color-active;
    }
  }

  .reason-title {
    margin-bottom: 25px;
    color: #888;
    font-size: 16px;
    text-align: center;
  }

  .reason-item {
    margin-bottom: 15px;

    checkbox {
      vertical-align: 2px;
    }
  }

  .reason-actions {
    margin-bottom: -5px;

    btn {
      display: block;
      width: 45%;
    }
  }

  .modal-dialog {
    width: 70% !important;
  }

  .deny-wrap {
    margin-bottom: 25px;
  }

  .deny-main {
    flex: 1;
    width: 100%;
    overflow: hidden;
    margin-right: 15px;
  }

  .deny-bookName {
    margin-bottom: 8px;
    font-weight: bold;
    .ellipsis();
  }

  .deny-reason {
    font-size: 13px;
    color: #ff0000;
    word-break: break-all;
    word-wrap: break-word;
  }

  .deny-img {
    width: 70px;
    height: 70px;
    overflow: hidden;

    image {
      width: 100%;
    }
  }
</style>

<template>
  <panel>
    <steps stepIndex="{{stepIndex}}" items="{{stepItems}}"></steps>
  </panel>
  <panel custom-class="delivery-panel">
    <view class="delivery-body">
      <icon name="geo" size="20px" custom-class="geo-icon"></icon>
      <view class="delivery-main">
        <view class="delivery-hd">
          <text class="username">{{order.orderName}}</text>
          <text class="usertel">{{order.orderMobile}}</text>
        </view>
        <view class="delivery-address">{{order.orderProvince}} {{order.orderCity}} {{order.orderRegion}}{{order.orderAddress}}</view>
        <view class="delivery-picktime">预约上门取件时间: {{order.appointment}}</view>
      </view>
    </view>
  </panel>
  <panel>
    <view class="panel-title" slot="title">
      <view class="book-title">
        <icon name="library" size="20px"></icon>
        <text>图书列表</text>
      </view>
    </view>
    <repeat for="{{order.bookInfos}}" key="index">
      <view class="book-body" :class="{'hairline--bottom': index < order.bookInfos.length - 1}">
        <view class="book-cover">
          <image src="{{item.smallIcon}}" mode="widthFix" lazyload="true"></image>
        </view>
        <view class="book-main">
          <view class="book-hd">
            <view class="title">{{item.name}}</view>
            <view class="desc">{{item.author}}</view>
            <view class="desc">{{item.press}}</view>
          </view>
          <view class="book-specs">
            <view class="price" wx:if="{{order.orderStatus === 2001 || order.orderStatus === 1002 || order.orderStatus === 1003}}">￥{{filters.toFixed(item.actualIncome)}}</view>
            <view class="price" wx:else>￥{{filters.toFixed(item.expectIncome)}}</view>
            <view class="status" :class="{'red': item.bookStatus === 2001}" @tap="showDenyInfo({{item}})">
              {{item.bookStatusText}}
              <icon name="question-o" size="mini" wx:if="{{item.bookStatus === 2001}}"></icon>
            </view>
          </view>
        </view>
      </view>
    </repeat>
  </panel>
  <panel custom-class="income-panel">
    <view class="income-item">
      <text>预计收入</text>
      <text>￥{{filters.toFixed(order.expectIncome)}}</text>
    </view>
    <view class="income-item" wx:if="{{order.orderStatus === 1003}}">
      <text>实际收入</text>
      <text>￥{{filters.toFixed(order.actualIncome)}}</text>
    </view>
  </panel>
  <panel custom-class="order-panel">
    <view class="order-item">
      <text>订单编号：{{order.orderCode}}</text>
      <text @tap="copyOrderNum" class="copy-text">复制</text>
    </view>
    <view class="order-item">
      <text>创建时间：{{order.createTime}}</text>
    </view>
  </panel>
  <view class="action-button" @tap="showActionSheet">
    <icon name="service" />
    <text>召唤客服</text>
  </view>
  <view class="action-button" @tap="showModal" wx:if="{{order.orderStatus === 1000}}">
    <text>取消订单</text>
  </view>

  <modal visible="{{modalVisible}}" @close="handleModalClose">
    <view class="reason-title">取消订单原因</view>
    <view class="reasons-wrap">
      <repeat for="{{cancelReasons}}" key="index">
        <view class="reason-item" @tap="selectReason({{index}})">
          <checkbox checked="{{item.checked}}" style="margin-right: 8px;" />
          <text>{{item.text}}</text>
        </view>
      </repeat>
    </view>
    <view class="reason-actions flex-between">
      <btn type="plain" size="small" @tap="handleModal({{false}})">取消</btn>
      <btn bordered="true" size="small" @tap="handleModal({{true}})">确定</btn>
    </view>
  </modal>

  <modal visible="{{denyModalVisible}}" @close="handleDenyModalClose">
    <view class="reason-title">审核未通过原因</view>
    <view class="deny-wrap flex">
      <view class="deny-main">
        <view class="deny-bookName">{{denyInfo.bookName}}</view>
        <view class="deny-reason">{{denyInfo.reason}}</view>
      </view>
      <veiw class="deny-img" @tap="previewDenyImg">
        <image src="{{denyInfo.img}}" mode="widthFix"></image>
      </veiw>
    </view>
    <view class="reason-actions flex-h-center">
      <btn @tap="handleDenyModal">确定</btn>
    </view>
  </modal>

  <action-sheet
    show="{{actionShow}}"
    actions="{{serviceActions}}"
    cancelText="取消"
    @select="selectService"
    @cancel="hideActionSheet"
    @close="hideActionSheet"
  >
  </action-sheet>

</template>

<script>
  import wepy from 'wepy'

  import { toast, getPrevPage } from '../../utils/util'
  import fetch from '../../service/fetch'
  import filters from '../../filters/number.wxs'

  const ORDER_STATUS_MAP = {
    1000: {
      index: 0,
      desc: '平台审核',
      items: [1000, 1001, 1002, 1003]
    },
    2001: {
      index: 1,
      desc: '审核失败',
      items: [1000, 2001]
    },
    2002: {
      index: 1,
      desc: '用户取消',
      items: [1000, 2002]
    },
    1001: {
      index: 1,
      desc: '物流取件',
      items: [1000, 1001, 1002, 1003]
    },
    2003: {
      index: 2,
      desc: '取件失败',
      items: [1000, 1001, 2003]
    },
    1002: {
      index: 2,
      desc: '验收书籍',
      items: [1000, 1001, 1002, 1003]
    },
    1003: {
      index: 3,
      desc: '星币到账',
      items: [1000, 1001, 1002, 1003]
    }
  }

  const BOOK_STATUS_MAP = {
    1000: '待审核',
    1001: '审核通过',
    2001: '审核未通过'
  }

  export default class Index extends wepy.page {
    config = {
      navigationBarTitleText: '回收订单详情',
      usingComponents: {
        icon: '/components/icon/index',
        steps: '/components/steps/index',
        panel: '/components/panel/index',
        modal: '/components/modal/index',
        btn: '/components/button/index',
        checkbox: '/components/check-box/index',
        'action-sheet': '/components/action-sheet/index'
      }
    }

    data = {
      cancelReasons: [
        {
          checked: true,
          text: '不想卖了'
        },
        {
          checked: false,
          text: '填错信息，重新下单'
        },
        {
          checked: false,
          text: '其它原因'
        }
      ],
      actionShow: false,
      serviceActions: [
        { name: '微信客服', action: 'contact', openType: 'contact' },
        { name: '电话客服', action: 'makeCall' }
      ],
      order: {},
      denyInfo: {},
      orderIndex: 0,
      modalVisible: false,
      denyModalVisible: false
    }

    wxs = {
      filters
    }

    computed = {
      stepItems () {
        const statusItem = ORDER_STATUS_MAP[this.order.orderStatus]
        if (statusItem) {
          return statusItem.items.map((status, i) => ({
            text: ORDER_STATUS_MAP[status].desc,
            date: i < 2 ? '2018-12-31 14:01' : null,
            subItems: status === 1001 ? [
              {text: '从上海分拔中心入库', date: '2019-01-22 11:59:02'},
              {text: '订单已装车完成，从上海分拔中心发出', date: '2019-01-22 11:59:02'},
              {text: '订单已装车完成，从上海分拔中心发出', date: '2019-01-22 11:59:02'},
              {text: '订单已装车完成，从上海分拔中心发出', date: '2019-01-22 11:59:02'}
            ] : []}))
        }
        return []
      },
      stepIndex () {
        return 1
        // const item = ORDER_STATUS_MAP[this.order.orderStatus]
        // if (item) {
        //   return item.index
        // }
        // return 0
      }
    }

    methods = {
      async copyOrderNum () {
        await wepy.setClipboardData({data: this.order.orderCode})
        toast.success('复制成功')
      },
      async showDenyInfo (book) {
        if (book.bookStatus !== 2001) return Promise.resolve()
        const res = await fetch.post('/recover/book/deny/reason', {orderCode: this.order.orderCode, bookCode: book.bookCode}, false)
        this.denyInfo = {bookName: book.name, reason: res.datas.changeReason, img: res.datas.images}
        this.denyModalVisible = true
        this.$apply()
      },
      selectService (e) {
        const item = e.detail.value
        if (item.action === 'makeCall') {
          wx.makePhoneCall({
            phoneNumber: '18502120206'
          })
        }
      },
      showActionSheet () {
        this.actionShow = true
      },
      hideActionSheet () {
        this.actionShow = false
      },
      selectReason (index) {
        this.cancelReasons = this.cancelReasons.map((reason, i) => ({...reason, checked: index === i}))
      },
      showModal () {
        this.modalVisible = true
      },
      handleModal (flag) {
        this.modalVisible = false
        if (flag) {
          const reason = this.cancelReasons.find(item => item.checked).text
          this.cancelOrder(this.order.orderCode, reason)
        }
      },
      handleDenyModal () {
        this.denyModalVisible = false
      },
      previewDenyImg () {
        let url = this.denyInfo.img
        wx.previewImage({
          current: url,
          urls: [url]
        })
      },
      handleModalClose () {
        this.modalVisible = false
      },
      handleDenyModalClose () {
        this.denyModalVisible = false
      }
    }

    async cancelOrder (orderCode, reason) {
      await fetch.post('/recover/order/cancel', {orderCode, reason})
      this.order.orderStatus = 2002
      this.$apply()
      getPrevPage().setOrderStatus(this.orderIndex, this.order.orderStatus)
      toast.success('取消成功')
    }

    onLoad({ order, index }) {
      if (order) {
        order = JSON.parse(order)
        order.bookInfos = order.bookInfos.map(item =>
          ({...item, bookStatusText: BOOK_STATUS_MAP[item.bookStatus]})
        )
        this.order = order
        this.orderIndex = index
      }
    }
  }
</script>
