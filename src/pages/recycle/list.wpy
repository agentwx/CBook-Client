<style lang="less">
  @import '../../styles/mixins/common';

  page {
    background-color: #f7f7f7;
  }

  .orders-scrollview {
    width: 100%;
    overflow: hidden;
  }

  .order-hd {
    color: #777;
    font-weight: normal;
    font-size: 13px;
  }

  .books-scrollview {
    width: 100%;
    overflow: hidden;
  }

  .order-body {
    .flex();
    flex-wrap: nowrap;
  }

  .order-cover {
    .flex-center();
    width: 75px;
    height: 92px;
    margin-right: 15px;
    overflow: hidden;
    flex: none;

    image {
      width: 100%;
      height: 100%;
    }
  }

  .order-footer {
    color: #777;
    align-items: start;
  }

  .create-time {
    font-size: 13px;
    margin-top: 2px;
  }

  .order-subinfo {
    text-align: right;

    .order-sumup {
      margin-bottom: 8px;

      .bold {
        color: #333;
      }
    }
  }

  .empty-layer-wrap {
    position: fixed;
    left: 0;
    right: 0;
    top: 0;
    bottom: 0;
    background-color: #fff;
    z-index: -1;
  }

  .empty-layer {
    position: absolute;
    left: 50%;
    top: 50%;
    width: 70%;
    max-width: 320px;
    transform: translate(-50%,-50%);

    image {
      width: 100%;
      height: 197px;
    }

    .empty-action {
      position: absolute;
      left: 0;
      right: 0;
      bottom: 20px;
      text-align: center;
    }

    .empty-text {
      font-size: 16px;
      color: #888;
    }
  }
</style>

<template>
  <view class="orders-wrapper" wx:if="{{orders.length > 0}}">
    <repeat for="{{orders}}" key="index">
      <panel @tap="viewDetail({{item}}, {{index}})">
        <view class="panel-title order-hd" slot="title">
          <text class="order-num">单号：{{item.orderCode}}</text>
          <text class="order-status">{{item.orderStatusText}}</text>
        </view>
        <scroll-view class="books-scrollview" scroll-x="true">
          <view class="order-body">
            <block wx:for="{{item.bookInfos}}" wx:key="index">
              <view class="order-cover">
                <image src="{{item.smallIcon}}" mode="widthFix" lazyload="true"></image>
              </view>
            </block>
          </view>
        </scroll-view>
        <view class="panel-footer order-footer" slot="footer">
          <view class="create-time">{{item.createTime}}</view>
          <view class="order-subinfo">
            <view class="order-sumup">
              总共<text class="bold">{{item.bookInfos.length}}</text>件商品 预计收入: <text class="bold">￥{{item.income}}</text>
            </view>
            <btn inline="true" bordered="true" size="small">查看详情</btn>
          </view>
        </view>
      </panel>
    </repeat>
  </view>

  <view class="empty-layer-wrap" wx:if="{{!isLoading && orders.length === 0}}">
    <view class="empty-layer">
      <image src="../../assets/images/orders_empty_bg.png"></image>
      <view class="empty-action">
        <view class="empty-text">暂无订单~</view>
      </view>
    </view>
  </view>

  <weui-loading custom-style="margin-top: -5px;" visible="{{orders.length > 4}}" empty="{{pageNum > 1 && !isLoading && isEmpty}}" />
  <gotop />
</template>

<script>
  import wepy from 'wepy'
  import fetch from '../../service/fetch'

  const ORDER_STATUS_MAP = {
    1000: '平台审核',
    2001: '审核失败',
    2002: '用户取消',
    1001: '物流取件',
    2003: '取件失败',
    1002: '验收书籍',
    1003: '书费到账'
  }

  export default class Index extends wepy.page {
    config = {
      navigationBarTitleText: '回收订单',
      usingComponents: {
        'btn': '/components/button/index',
        'panel': '/components/panel/index',
        'weui-loading': '/components/weui-loading/index',
        'gotop': '/components/gotop/index'
      }
    }

    components = {
    }

    data = {
      isLoading: true,
      isEmpty: false,
      pageNum: 1,
      orders: []
    }

    methods = {
      viewDetail (order, index) {
        this.$navigate('/pages/recycle/detail', { order: JSON.stringify(order), index })
      }
    }

    async loadOrders () {
      let params = {
        offset: this.pageNum,
        limit: 5
      }

      try {
        this.isLoading = true
        let res = await fetch.post('/recover/order/list', params, this.pageNum === 1)
        let items = res.datas.Items || []
        items = items.map(item =>
          ({...item, orderStatusText: ORDER_STATUS_MAP[item.orderStatus]})
        )
        if (this.pageNum === 1) {
          this.orders = items
        } else {
          this.orders = this.orders.concat(items)
        }
        if (items.length > 0) {
          this.pageNum++
          this.isEmpty = false
        } else {
          this.isEmpty = true
        }
      } finally {
        this.isLoading = false
        this.$apply()
      }
    }

    setOrderStatus (index, statusCode) {
      this.orders[index].orderStatus = statusCode
      this.orders[index].orderStatusText = ORDER_STATUS_MAP[statusCode]
      this.$apply()
    }

    reloadOrders () {
      this.pageNum = 1
      this.loadOrders()
    }

    onReachBottom () {
      this.loadOrders()
    }

    onLoad () {
      this.reloadOrders()
    }
  }
</script>
