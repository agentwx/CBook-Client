<style lang="less">
  @import '../../less/mixin';

  page {
    background-color: #f7f7f7;
  }

  .panel:last-child {
    margin-bottom: 0;
  }

  .orders-scrollview {
    width: 100%;
    overflow: hidden;
  }

  .order-hd {
    font-weight: normal;
    color: #666;
    .order-num {
      color: #666;
    }

    .order-status {
      font-size: 26rpx;
      color: #999;
    }
  }

  .books-scrollview {
    width: 100%;
    overflow: hidden;
  }

  .order-body {
    .flex();
    flex-wrap: nowrap;
    padding-top: 20rpx;
  }

  .order-cover {
    width: 150rpx;
    height: 184rpx;
    margin-right: 30rpx;
    overflow: hidden;
    flex: none;

    image {
      width: 100%;
      height: 100%;
    }
  }

  .create-time {
    font-size: 26rpx;
    color: #999;
    margin-top: 4rpx;
  }

  .order-subinfo {
    text-align: right;

    .order-sumup {
      margin-bottom: 16rpx;
      color: #777;

      .bold {
        color: #333;
      }
    }
  }

  .empty-layer-wrap {
    position: fixed;
    left: 0;
    right: 0;
    top: 0;
    bottom: 0;
    background-color: #fff;
  }

  .empty-layer {
    position: absolute;
    left: 50%;
    top: 50%;
    width: 70%;
    max-width: 640rpx;
    transform: translate(-50%,-50%);

    image {
      width: 100%;
      height: 390rpx;
    }

    .empty-action {
      position: absolute;
      left: 0;
      right: 0;
      bottom: 40rpx;
      text-align: center;
    }

    .empty-text {
      font-size: 32rpx;
      color: #888;
    }
  }
</style>

<template>
  <view class="orders-wrapper" wx:if="{{orders.length > 0}}">
    <repeat for="{{orders}}">
      <panel :params.sync="item" @tap.user="viewDetail">
        <view class="panel-title order-hd" slot="title">
          <text class="order-num">单号：{{item.orderCode}}</text>
          <text class="order-status">{{item.orderStatusText}}</text>
        </view>
        <scroll-view class="books-scrollview" scroll-x="true">
          <view class="order-body">
            <block wx:for="{{item.bookInfos}}" wx:key="index">
              <view class="order-cover">
                <image src="{{item.smallIcon}}" lazyload="true"></image>
              </view>
            </block>
          </view>
        </scroll-view>
        <view class="panel-footer order-footer" slot="footer">
          <view class="create-time">{{item.createTime}}</view>
          <view class="order-subinfo">
            <view class="order-sumup">
              总共<text class="bold">{{item.bookInfos.length}}</text>件商品 预计收入: <text class="bold">￥{{item.income}}</text>
            </view>
            <btn inline="true" bordered="true" size="small">查看详情</btn>
          </view>
        </view>
      </panel>
    </repeat>
  </view>

  <view class="empty-layer-wrap" wx:if="{{!isLoading && orders.length === 0}}">
    <view class="empty-layer">
      <image src="../../images/orders_empty_bg.png"></image>
      <view class="empty-action">
        <view class="empty-text">暂无订单~</view>
      </view>
    </view>
  </view>

  <weui-loading fixed-bottom="true" visible="{{isLoading && pageNum > 1}}"></weui-loading>
</template>

<script>
  import wepy from 'wepy'
  import Panel from '@/components/panel'
  import fetch from '../../service/fetch'

  const ORDER_STATUS_MAP = {
    0: '线上审核',
    1: '物流取件',
    2: '平台取件',
    3: '验收书籍',
    4: '书费到账'
  }

  export default class Index extends wepy.page {
    config = {
      navigationBarTitleText: '回收订单',
      usingComponents: {
        'btn': '/components/button/index',
        'weui-loading': '/components/weui-loading/index'
      }
    }

    components = {
      panel: Panel
    }

    data = {
      isLoading: true,
      pageNum: 1,
      orders: []
    }

    methods = {
      viewDetail (order) {
        this.$navigate('/pages/recycle/detail', { order: JSON.stringify(order) })
      }
    }

    async loadOrders () {
      let params = {
        offset: this.pageNum,
        limit: 5
      }

      try {
        this.isLoading = true
        let res = await fetch.post('/recover/order/list', params, this.pageNum === 1)
        if (res.datas.Items.length > 0) {
          let items = res.datas.Items.map(item =>
            ({...item, orderStatusText: ORDER_STATUS_MAP[item.orderStatus]})
          )
          if (this.pageNum > 1) {
            this.orders = this.orders.concat(items)
          } else {
            this.orders = items
          }
          this.pageNum++
        }
      } finally {
        this.isLoading = false
        this.$apply()
      }
    }

    reloadOrders () {
      this.pageNum = 1
      this.loadOrders()
    }

    onReachBottom () {
      this.loadOrders()
    }

    onLoad() {
      this.reloadOrders()
    }
  }
</script>
