<style lang="less">
  @import '../../styles/mixin';

  page {
    padding-bottom: 50px;
    background-color: #f7f7f7;
  }

  .addr-title {
    font-size: 15px;
    margin-bottom: 5px;
  }

  .addr-username {
    margin-right: 10px;
  }

  .addr-text {
    .light-font();
    font-size: 13px;
    color: #888;
  }

  .address-action-button {
    position: fixed;
    left: 0;
    right: 0;
    bottom: 0;
    height: 50px;
    font-size: 18px;
    color: #fff;
    .g-gradient(60%);
    .flex-center();

    &:active {
      .g-darken-gradient(60%);
    }
  }

  .addr-left {
    padding: 12px 8px;
    margin-top: -12px;
    margin-bottom: -12px;
    margin-left: -8px;
    .flex-v-center();
  }

  .addr-right {
    .flex-v-center();
    margin-right: -18px;
  }

  .addr-action-item {
    padding: 12px 8px;
    margin-top: -12px;
    margin-bottom: -12px;
    margin-left: 12px;

    icon {
      margin-right: 3px;
      color: #888;
      vertical-align: middle;
    }

    text {
      vertical-align: middle;
    }
  }

  .empty-layer-wrap {
    position: fixed;
    left: 0;
    top: 0;
    right: 0;
    bottom: 50px;
    background-color: #fff;
  }

  .empty-layer {
    position: absolute;
    left: 50%;
    top: 50%;
    width: 70%;
    max-width: 320px;
    transform: translate(-50%,-50%);

    image {
      width: 100%;
      height: 195px;
    }

    .empty-action {
      position: absolute;
      left: 0;
      right: 0;
      bottom: 20px;
      text-align: center;
    }

    .empty-text {
      font-size: 16px;
      color: #888;
    }
  }
</style>
<template>
  <repeat for="{{addressList}}" key="index">
    <panel @tap="selectAddress({{item}})">
      <view class="addr-title">
        <text class="addr-username">{{item.name}}</text>
        <text class="addr-usertel">{{item.mobile}}</text>
      </view>
      <view class="addr-text">
        {{item.province}}{{item.city}}{{item.region}}{{item.address}}
      </view>
      <view class="panel-footer" slot="footer">
        <view class="addr-left" @tap.stop="toggleDefault({{item}})">
          <check-box readonly="true" checked="{{item.isDefault}}" />
          <text style="margin-left: 5px;">设为默认</text>
        </view>
        <view class="addr-right">
          <view class="addr-action-item" @tap.stop="editAddress({{item}})">
            <icon name="edit"></icon>
            <text>编辑</text>
          </view>
          <view class="addr-action-item" @tap.stop="deleteAddress({{item.code}})">
            <icon name="trash"></icon>
            <text>删除</text>
          </view>
        </view>
      </view>
    </panel>
  </repeat>

  <view class="empty-layer-wrap" wx:if="{{!isLoading && addressList.length === 0}}">
    <view class="empty-layer">
      <image src="../../images/address_empty_bg.png"></image>
      <view class="empty-action">
        <view class="empty-text">暂无地址~</view>
      </view>
    </view>
  </view>

  <view class="address-action-button" @tap="newAddress">
    新建地址
  </view>

</template>

<script>
  import wepy from 'wepy'
  import fetch from '../../service/fetch'
  import {toast, confirm, getPrevPage} from '../../utils/util'

  export default class Index extends wepy.page {
    config = {
      navigationBarTitleText: '地址管理',
      usingComponents: {
        'icon': '/components/icon/index',
        'panel': '/components/panel/index',
        'check-box': '/components/check-box/index'
      }
    }

    components = {
    }

    data = {
      isLoading: true,
      addressList: []
    }

    methods = {
      async toggleDefault (item) {
        if (item.isDefault) {
          return
        }
        let params = {
          name: item.name,
          mobile: item.mobile,
          province: item.province,
          city: item.city,
          region: item.region,
          address: item.address,
          isDefault: item.isDefault ? 0 : 1,
          code: item.code
        }
        await fetch.post('/user/address/update', params)
        this.loadData()
      },
      editAddress (item) {
        this.$navigate('/pages/address/new_address', {...item, actionMode: 'edit'})
      },
      async deleteAddress (code) {
        let isOK = await confirm('确定要删除吗?')
        if (isOK) {
          await fetch.post('/user/address/delete', {code})
          this.loadData()
          toast.success('删除成功')
        }
      },
      newAddress () {
        this.$navigate('/pages/address/new_address')
      },
      selectAddress (address) {
        if (this.actionMode === 'select') {
          getPrevPage().fillAddress(address)
          this.$back()
        }
      }
    }

    async loadData () {
      this.isLoading = true
      let res = await fetch.post('/user/address/list')
      this.addressList = res.datas.map(item => ({...item, isDefault: item.isDefault === 1}))
      this.isLoading = false
      this.$apply()
    }

    onLoad (options) {
      this.actionMode = options.actionMode
      this.loadData()
    }
  }
</script>
