<style lang="less">
  @import '../../less/mixin';

  page {
    background-color: #f7f7f7;
    padding-top: 95rpx;
  }

  .order-tabhead {
    position: fixed !important;
    left: 0;
    right: 0;
    top: 0;
    z-index: 10;
  }

  .order-hd {
    font-weight: normal;
    font-size: 26rpx;

    .order-num {
      color: #777;
    }

    .order-status {
      color: @gcolor;

      &.closed {
        color: @color-disabled;
      }
    }
  }

  .order-body {
    .flex();
    padding-top: 20rpx;
  }

  .order-cover {
    width: 160rpx;
    height: 196rpx;
    margin-right: 30rpx;
    overflow: hidden;

    image {
      width: 100%;
      height: 100%;
    }
  }

  .order-main {
    flex: 1;
    .flex-h-center();
    flex-direction: column;
    justify-content: space-between;
  }

  .order-pd-hd {
    .title {
      .word-break();
      margin-bottom: 6rpx;
    }

    .desc {
      .light-font();
      font-size: 24rpx;
      color: #888;
    }
  }

  .order-pd-specs {
    .flex();
    justify-content: space-between;

    .price {
      font-size: 30rpx;
    }
  }

  .order-footer {
    color: #777;
  }

  .create-time {
    font-size: 26rpx;
    margin-top: 4rpx;
  }

  .order-subinfo {
    text-align: right;

    .order-sumup {
      margin-bottom: 16rpx;

      .price {
        color: #333;
      }
    }
  }

  panel:last-child {
    .panel {
      margin-bottom: 0;
    }
  }

  .empty-layer-wrap {
    position: fixed;
    left: 0;
    bottom: 0;
    right: 0;
    top: 0;
    background-color: #fff;
  }

  .empty-layer {
    position: absolute;
    left: 50%;
    top: 50%;
    width: 70%;
    max-width: 640rpx;
    transform: translate(-50%,-50%);

    image {
      width: 100%;
      height: 390rpx;
    }

    .empty-action {
      position: absolute;
      left: 0;
      right: 0;
      bottom: 40rpx;
      text-align: center;
    }

    .empty-text {
      font-size: 32rpx;
      color: #888;
    }
  }
</style>

<template>
  <tab-head custom-class="order-tabhead" items="{{tabItems}}" tabIndex="{{tabIndex}}" @change="tabheadChange"></tab-head>

  <view class="tabs-wrapper" wx:if="{{orders.length > 0}}">
    <block wx:for="{{orders}}" wx:key="index">
      <panel>
        <view class="panel-title order-hd" slot="title">
          <text class="order-num">单号：{{item.orderCode}}</text>
          <text class="order-status {{item.orderStatus == 10 ? 'closed' : ''}}">{{item.orderStatusText}}</text>
        </view>
        <block wx:for="{{item.bookInfos}}" wx:for-item="book" wx:key="index">
          <view class="order-body">
            <view class="order-cover">
              <image src="{{book.smallIcon}}" lazyload="true"></image>
            </view>
            <view class="order-main">
              <view class="order-pd-hd">
                <view class="title">{{book.name}}</view>
                <view class="desc">{{book.author}}</view>
                <view class="desc">{{book.press}}</view>
              </view>
              <view class="order-pd-specs">
                <text class="price">￥{{book.price}}</text>
              </view>
            </view>
          </view>
        </block>
        <view class="panel-footer order-footer" slot="footer">
          <view class="create-time">
            {{item.createTime}}
          </view>
          <view class="order-subinfo">
            <view class="order-sumup">
              总共{{item.bookInfos.length}}件商品 合计 <text class="price">￥{{item.total}}</text>
            </view>
            <btn inline="true" bordered="true" size="small" @tap="payOrder({{item.orderCode}})" wx:if="{{item.orderStatus==0}}">去付款</btn>
          </view>
        </view>
      </panel>
    </block>
  </view>

  <view class="empty-layer-wrap" wx:if="{{!isLoading && orders.length === 0}}">
    <view class="empty-layer">
      <image src="../../images/orders_empty_bg.png"></image>
      <view class="empty-action">
        <view class="empty-text">暂无订单~</view>
      </view>
    </view>
  </view>

  <weui-loading fixed-bottom="true" visible="{{isLoading && pageNum > 1}}"></weui-loading>
</template>

<script>
  import wepy from 'wepy'
  import fetch from '../../service/fetch'
  import { toast } from '../../utils/util'

  const ORDER_STATUS_MAP = {
    0: '待付款',
    1: '待发货',
    2: '待收货',
    3: '已完成',
    10: '交易关闭'
  }

  export default class Index extends wepy.page {
    config = {
      navigationBarTitleText: '订单列表',
      usingComponents: {
        'tab-head': '/components/tab-head/index',
        'weui-loading': '/components/weui-loading/index',
        'btn': '/components/button/index',
        'panel': '/components/panel/index'
      }
    }

    components = {
    }

    data = {
      isLoading: true,
      tabIndex: 0,
      pageNum: 1,
      tabItems: ['全部', '待付款', '待发货', '待收货', '已完成'],
      orders: []
    }

    methods = {
      tabheadChange (e) {
        this.tabIndex = e.detail.value
        this.reloadOrders(this.tabIndex)
      },
      async payOrder (orderCode) {
        const res = await fetch.post('/buy/order/payinfo', { orderCode })
        if (!res.datas.package || !res.datas.paySign) {
          return toast.error('支付创建失败')
        }
        await wepy.requestPayment(res.datas)
        this.reloadOrders(this.tabIndex)
        toast.success('支付成功')
      }
    }

    async loadOrders (tabIndex) {
      let params = {
        offset: this.pageNum,
        limit: 5,
        filter: tabIndex === 0
          ? []
          : [{key: 'orderStatus', values: [tabIndex - 1]}]
      }

      try {
        this.isLoading = true
        let res = await fetch.post('/buy/order/list', params, this.pageNum === 1)
        let items = res.datas.Items || []

        items = items.map(item =>
          ({...item, orderStatusText: ORDER_STATUS_MAP[item.orderStatus]})
        )

        if (this.pageNum > 1) {
          this.orders = this.orders.concat(items)
        } else {
          this.orders = items
          wx.pageScrollTo({
            scrollTop: 0,
            duration: 0
          })
        }

        if (items.length > 0) {
          this.pageNum++
        }
      } finally {
        this.isLoading = false
        this.$apply()
      }
    }

    async reloadOrders (orderType) {
      this.pageNum = 1
      await this.loadOrders(orderType)
    }

    onReachBottom () {
      this.loadOrders(this.tabIndex)
    }

    onLoad({ tabIndex }) {
      this.tabIndex = Number(tabIndex) || 0
      this.reloadOrders(this.tabIndex)
    }
  }
</script>
