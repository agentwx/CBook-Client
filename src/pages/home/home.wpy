<style lang="less">
  @import '../../styles/mixin';
  @import '../../styles/ellipsis';

  page {
    height: 100%;
  }

  .home-search-wrap {
    padding: 30rpx 20rpx;
  }

  .home-search {
    .flex-v-center();
    padding-left: 30rpx;
    background-color: #fff;
    border-radius: 60rpx;
    overflow: hidden;
    box-shadow: 0 0 40rpx rgba(0, 0, 0, 0.1);
  }

  .search-input {
    width: 100%;
    padding: 20rpx 30rpx 20rpx 16rpx;
    height: 80rpx;
  }

  .home-banner {
    position: relative;
    height: 236rpx;
    margin-left: 20rpx;
    margin-right: 20rpx;
    overflow: hidden;
    margin-bottom: 20rpx;
    border-radius: 12rpx;
    box-shadow: 0 10rpx 24rpx rgba(0, 0, 0, 0.08);

    image {
      width: 100%;
      height: 100%;
      display: block;
    }
  }

  .filter-toolbar-wrap {
    position: relative;
    height: 78rpx;
    z-index: 10;
  }

  .filter-toolbar {
    position: relative;
    z-index: 5;

    &.fixed {
      position: fixed;
      left: 0;
      right: 0;
      top: 0;
      box-shadow: 0 10rpx 16rpx rgba(0,0,0,.08);

      .filter-toolbar-inner {
        background-color: #fff;
      }
    }
  }

  .filter-toolbar-inner {
    position: relative;
    .flex-v-center();
    justify-content: space-between;
    padding-left: 20rpx;
    padding-right: 20rpx;
    height: 78rpx;
    z-index: 5;

    &:after {
      margin-left: 40rpx;
      margin-right: 40rpx;
    }

    &.expand {
      background-color: #fff;
    }

    .filter-itemtype {
      flex: 1;
      padding-top: 20rpx;
      padding-bottom: 20rpx;
      color: #666;
      text-align: center;

      &.selected {
        font-weight: bold;
        color: #333;
      }

      &.sort {
        text-align: left;
        margin-right: 24rpx;
      }

      &.filter {
        text-align: right;
        &.selected {
          font-weight: normal;
          color: #27a1f8;
        }
      }
    }
  }

  .filter-sublayer {
    position: absolute;
    left: 0;
    top: 100%;
    right: 0;
    background-color: #fff;
    box-shadow: 0 12rpx 24rpx rgba(0, 0, 0, 0.07);
  }

  .filter-itemsort-wrap{
    padding-bottom: 24rpx;
  }

  .filter-itemsort {
    padding: 24rpx;
    .flex();
    justify-content: space-between;

    > icon {
      visibility: hidden;
    }

    &.selected {
      color: #27a1f8;
      > icon {
        visibility: visible;
      }
    }

    &:active {
      background-color: @color-active;
    }
  }

  .filter-catelog {
    padding: 30rpx 20rpx 0;
  }

  .filter-catelog-hd {
    margin-bottom: 20rpx;

    icon {
      margin-right: 6rpx;
    }

    icon, text {
      vertical-align: middle;
    }
  }

  .filter-catelog-bd {
    margin-bottom: 30rpx;
  }

  .filter-catelog-item {
    display: inline-block;
    padding: 10rpx 24rpx;
    border: 1rpx solid @color-border;
    border-radius: 60rpx;
    margin: 0 16rpx 16rpx 0;
    color: #666;
    font-size: 26rpx;

    &.selected {
      //background-color: #daeaf6;
      border-color: @gcolor;
      color: @gcolor;
    }
  }

  .filter-catelog-action {
    .flex();
    box-shadow:0 -16rpx 36rpx rgba(0, 0, 0, 0.04);

    > view {
      flex: 1;
      height: 90rpx;
      .flex-center();
      font-size: 30rpx;
    }

    .filter-btn-reset {
      border-top: 1rpx solid @color-light-gray;

      &:active {
        background-color: @color-active;
      }
    }

    .filter-btn-ok {
      color: #fff;
      .g-gradient();

      &:active {
        .g-darken-gradient();
      }
    }
  }


  .product-panel {
    position: relative;
    .flex();
    padding: 20rpx;

    &:after {
      margin-left: 40rpx;
      margin-right: 40rpx;
    }
  }

  .product-cover {
    .flex-center();
    width: 200rpx;
    height: 254rpx;
    margin-left: 10rpx;
    margin-right: 30rpx;
    overflow: hidden;

    > image {
      display: block;
      width: 100%;
      height: 100%;
    }
  }

  .product-panel-body {
    flex: 1;
    .flex();
    flex-direction: column;
    justify-content: space-between;
    width: 100%;
    overflow: hidden;

    .product-caption {
      font-size: 30rpx;
      font-weight: bold;
      .ellipsis();
      margin-bottom: 10rpx;
    }

    .product-desc {
      .light-font();
      .ellipsis();
      font-size: 26rpx;
      color: #666;
      margin-bottom: 4rpx;
    }

    .product-tags {
      margin-top: 6rpx;
    }
  }

  .product-priceInfo {
    .flex-v-center();

    .product-price {
      font-size: 32rpx;
      font-weight: bold;
      color: #eb5a21;

      .unit {
        font-weight: normal;
        font-size: 24rpx;
      }
    }

    .product-tax {
      color: #27a1f8;
    }

    .split {
      width: 0;
      display: inline-block;
      border-left: 1rpx solid #ddd;
      margin-left: 16rpx;
      margin-right: 16rpx;
      height: 30rpx;
    }
  }

  .search-empty {
    .flex-center();
    color: #999;
    margin-top: 160rpx;

    icon {
      margin-right: 20rpx;
    }
  }
</style>

<template>
  <view class="home-search-wrap">
    <view class="home-search" @tap="toSearch">
      <icon name="find" custom-style=" font-size: 36rpx;color: #999;"></icon>
      <input type="text" class="search-input" placeholder="搜索书名、作者、图书的ISBN号" placeholder-class="input-placeholder" disabled></input>
    </view>
  </view>

  <view class="home-banner">
    <image src="../../images/home_banner.jpg"></image>
  </view>

  <view id="filter_bar" class="filter-toolbar-wrap" @touchmove.stop="true">
    <view class="filter-toolbar {{filterBarFixed ? 'fixed' : ''}}">
      <view class="filter-toolbar-inner hairline--bottom {{filterVisible ? 'expand' : ''}}">
        <view class="filter-itemtype sort {{filterVisible && filterType === 'sort' ? 'selected' : ''}}" @tap="showFilter('sort', 0, true)">
          {{sortName}}<icon size="mini" name="caret-down"></icon>
        </view>
        <view class="filter-itemtype {{sortType === 2 ? 'selected' : ''}}" @tap="showFilter('sort', 2, false)">
          人气优先
        </view>
        <view class="filter-itemtype {{sortType === 4 ? 'selected' : ''}}" @tap="showFilter('sort', 4, false)">
          新书优先
        </view>
        <view class="filter-itemtype filter {{filterVisible && filterType === 'catelog' ? 'selected' : ''}}" @tap="showFilter('catelog', 0, true)">
          筛选<icon size="mini" name="filter"></icon>
        </view>
      </view>
      <transition custom-class="filter-sublayer" name="slide-down" duration="300" show="{{filterVisible}}">
        <view class="filter-itemsort-wrap" wx:if="{{filterType === 'sort'}}">
          <block wx:for="{{sortTypes}}" wx:key="index">
            <view class="filter-itemsort {{item.checked ? 'selected' : ''}}" @tap="filterBySort({{item.value}})">
              <text>{{item.name}}</text>
              <icon name="check-o"></icon>
            </view>
          </block>
        </view>

        <view class="filter-catelog-wrapper" wx:if="{{filterType === 'catelog'}}">
          <view class="filter-catelog">
            <view class="filter-catelog-hd">
              <icon name="leaf" size="middle" type="svg"></icon>
              <text>年龄</text>
            </view>
            <view class="filter-catelog-bd">
              <block wx:for="{{ageTypes}}" wx:key="index">
              <view class="filter-catelog-item {{item.checked ? 'selected' : ''}}"
                    @tap="filterByTag('ageTypes', {{item.value}})">{{item.name}}</view>
              </block>
            </view>
            <view class="filter-catelog-hd">
              <icon name="catelog" size="middle" type="svg"></icon>
              <text>分类</text>
            </view>
            <view class="filter-catelog-bd">
              <block wx:for="{{tags}}" wx:key="index">
                <view class="filter-catelog-item {{item.checked ? 'selected' : ''}}" @tap="filterByTag('tags', {{item.value}})">{{item.name}}</view>
              </block>
            </view>
            <view class="filter-catelog-hd">
              <icon name="lang" size="middle" type="svg"></icon>
              <text>语言</text>
            </view>
            <view class="filter-catelog-bd">
              <block wx:for="{{languageTypes}}" wx:key="index">
                <view class="filter-catelog-item  {{item.checked ? 'selected' : ''}}" @tap="filterByTag('languageTypes', {{item.value}})">{{item.name}}</view>
              </block>
            </view>
          </view>
          <view class="filter-catelog-action">
            <view class="filter-btn-reset" @tap="resetFilter">重置</view>
            <view class="filter-btn-ok" @tap="searchFilter">确定</view>
          </view>
        </view>
      </transition>
    </view>
    <overlay show="{{filterVisible}}" duration="300" mask="true" @tap="hideFilter"></overlay>
  </view>

  <view class="product-listview">
    <repeat for="{{products}}" key="index">
      <view class="product-panel {{index < products.length - 1 ? 'hairline--bottom' : ''}}" @tap="viewDetail({{item}})">
        <view class="product-cover">
          <image src="{{item.smallImageUrl}}" mode="widthFix" lazyload="true"></image>
        </view>
        <view class="product-panel-body">
          <view class="product-maininfo">
            <view class="product-caption">{{item.name}}</view>
            <view class="product-desc">{{item.author}}</view>
          </view>
          <view class="product-subInfo">
            <raty value="{{item.doubanScore}}"></raty>
            <view class="product-tags">
              <tag wx:if="{{item.ageType.length > 0}}">{{item.ageType[0]}}</tag>
              <tag wx:if="{{item.tags.length > 0}}">{{item.tags[0]}}</tag>
              <tag wx:if="{{item.languageType.length > 0}}">{{item.languageType[0]}}</tag>
            </view>
            <view class="product-priceInfo">
              <view class="product-price">
                <text class="unit">￥</text>
                <text>{{item.price}}</text>
              </view>
              <view class="split"></view>
              <view class="product-tax">书费价 ￥{{item.costPrice}}</view>
            </view>
          </view>
        </view>
      </view>
    </repeat>
  </view>

  <view class="search-empty" wx:if="{{isLoading === false && products.length === 0}}">
    <icon name="empty" size="large"></icon>
    <text>抱歉，未查询到相关内容!</text>
  </view>

  <preloader visible="{{isLoading}}" />
  <!--<weui-loading visible="{{!inited || products.length > 4}}" empty="{{pageNum > 1 && !isLoading && isEmpty}}" />-->
  <modal-spinner wx:if="{{isLoading && isSpinShow}}" />
  <gotop />
</template>

<script>
import wepy from 'wepy'
import fetch from '../../service/fetch'
import { getNodeRect } from '../../utils/util'
import { getStore } from 'wepy-redux'

const store = getStore()

export default class Index extends wepy.page {
  config = {
    navigationBarTitleText: '星月童书',
    enablePullDownRefresh: true,
    usingComponents: {
      'modal-spinner': '/components/modal-spinner/index',
      'weui-loading': '/components/weui-loading/index',
      'transition': '/components/transition/index',
      'overlay': '/components/overlay/index',
      'raty': '/components/raty/index',
      'icon': '/components/icon/index',
      'tag': '/components/tag/index',
      'gotop': '/components/gotop/index',
      'preloader': '/components/preloader/index'
    }
  }

  data = {
    isLoading: true,
    isEmpty: false,
    inited: false,
    pageNum: 1,
    isSpinShow: false,
    filterBarFixed: false,
    filterVisible: false,
    sortTypes: [
      {checked: true, value: 1, name: '综合排序'},
      {checked: false, value: 2, name: '人气优先'},
      {checked: false, value: 3, name: '好评优先'},
      {checked: false, value: 4, name: '新书优先'},
      {checked: false, value: 5, name: '智能排序'}
    ],
    ageTypes: [
      {checked: true, value: 0, name: '全部'},
      {checked: false, value: 1, name: '0-2岁'},
      {checked: false, value: 2, name: '3-5岁'},
      {checked: false, value: 3, name: '6-8岁'},
      {checked: false, value: 4, name: '8岁以上'}
    ],
    tags: [
      {checked: true, value: 0, name: '全部'},
      {checked: false, value: 1, name: '课外阅读'},
      {checked: false, value: 2, name: '亲子关系'},
      {checked: false, value: 3, name: '历史文学'}
    ],
    languageTypes: [
      {checked: true, value: 0, name: '全部'},
      {checked: false, value: 1, name: '中文'},
      {checked: false, value: 2, name: '中文注音'},
      {checked: false, value: 3, name: '英文'},
      {checked: false, value: 4, name: '中英文'}
    ],
    sortType: 1,
    ageValue: 0,
    tagValue: 0,
    langValue: 0,
    filterType: null,
    products: []
  }

  computed = {
    sortName () {
      return this.sortTypes.find(item => item.value === this.sortType).name
    }
  }

  watch = {
    sortType (newVal) {
      this.sortTypes = this.sortTypes.map(item => {
        if (item.value === newVal) {
          item.checked = true
        } else {
          item.checked = false
        }
        return item
      })
    }
  }

  methods = {
    toSearch () {
      this.$navigate('/pages/search/search')
    },
    viewDetail (item) {
      this.$navigate('/pages/detail/detail', {product: JSON.stringify(item)})
    },
    showFilter (type, value, showDrop) {
      if (this.isLoading) return

      value = +value
      showDrop = showDrop === 'true'

      if (showDrop && this.products.length > 0 && this.lastScrollTop !== Math.floor(this.filterBarTop) && !this.filterBarFixed) {
        wx.pageScrollTo({
          scrollTop: this.filterBarTop + 1,
          duration: this.isIOS ? 300 : 0
        })
        setTimeout(() => {
          this.filterType = type
          if (!showDrop) {
            this.sortType = value
          }
          this.filterVisible = true
          this.$apply()
        }, this.isIOS ? 300 : 0)
      } else {
        if (showDrop && type === this.filterType) {
          this.filterVisible = !this.filterVisible
        } else {
          this.filterVisible = true
        }
        this.filterType = type
        if (!showDrop) {
          this.sortType = value
        }
      }

      if (type === 'sort' && !showDrop) {
        this.hideFilterAndSearch()
      }
    },
    filterBySort (value) {
      this.filterType = 'sort'
      this.sortType = value
      this.hideFilterAndSearch()
    },
    filterByTag (type, value) {
      this[type] = this[type].map(item => {
        if (value === 0) {
          if (item.value === 0) {
            item.checked = true
          } else {
            item.checked = false
          }
        } else {
          if (item.value === 0) {
            item.checked = false
          }
          if (item.value === value) {
            item.checked = !item.checked
          }
        }
        return item
      })
    },
    resetFilter () {
      this.ageTypes = this.ageTypes.map(item => ({...item, checked: item.value === this.ageValue}))
      this.tags = this.tags.map(item => ({...item, checked: item.value === this.tagValue}))
      this.languageTypes = this.languageTypes.map(item => ({...item, checked: item.value === this.langValue}))
    },
    searchFilter () {
      this.hideFilterAndSearch()
    }
  }

  hideFilterAndSearch () {
    this.isSpinShow = true
    this.filterVisible = false
    this.reloadProducts()
  }

  hideFilter () {
    this.filterVisible = false
  }

  getFilterBarTop() {
    getNodeRect('#filter_bar').then(rect => {
      this.filterBarTop = rect.top
    })
  }

  async loadProducts (params) {
    const filterChecked = list =>
      list.filter(item => item.checked && item.value > 0).map(item => item.value)

    let filter = [
      {
        key: 'ageType',
        values: filterChecked(this.ageTypes)
      },
      {
        key: 'tags',
        values: filterChecked(this.tags)
      },
      {
        key: 'languageType',
        values: filterChecked(this.languageTypes)
      }
    ]

    let sort = [
      {
        key: this.sortType
      }
    ]

    params = {
      offset: this.pageNum,
      limit: 10,
      filter,
      sort
    }

    try {
      this.isLoading = true
      let res = await fetch.post('/sales/list', params, false)
      let items = res.datas.Items || []
      if (this.pageNum === 1) {
        this.products = items
      } else {
        this.products = this.products.concat(items)
      }
      if (items.length > 0) {
        this.pageNum++
        this.isEmpty = false
      } else {
        this.isEmpty = true
      }
    } finally {
      this.isLoading = false
      this.inited = true
      this.isSpinShow = false
      this.$apply()
    }
  }

  async reloadProducts () {
    this.pageNum = 1
    await this.loadProducts()
  }

  onPageScroll (e) {
    let isFixed = false
    this.lastScrollTop = e.scrollTop

    if (e.scrollTop > this.filterBarTop) {
      isFixed = true
    }

    if (isFixed !== this.filterBarFixed) {
      this.filterBarFixed = isFixed
      this.$apply()
    }
  }

  onReachBottom () {
    this.loadProducts()
  }

  async onPullDownRefresh () {
    this.isSpinShow = true
    await this.reloadProducts()
    wx.stopPullDownRefresh()
  }

  onShareAppMessage () {
  }

  onShow () {
    const { recycles, shopCart } = store.getState()
    const recycleCount = recycles.length
    const cartCount = shopCart.reduce((prev, cur) => prev + cur.COUNT, 0)

    if (recycleCount > 0) {
      wx.setTabBarBadge({
        index: 1,
        text: recycleCount.toString()
      })
    } else {
      wx.removeTabBarBadge({
        index: 1
      })
    }

    if (cartCount > 0) {
      wx.setTabBarBadge({
        index: 2,
        text: cartCount.toString()
      })
    } else {
      wx.removeTabBarBadge({
        index: 2
      })
    }
  }

  async onLoad () {
    this.getFilterBarTop()
    this.$parent.ready(() => {
      this.reloadProducts()
    })
    const sysInfo = await wepy.getSystemInfo()
    this.isIOS = /IOS/i.test(sysInfo.system)
  }
}
</script>
