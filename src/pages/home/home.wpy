<style lang="less">
  @import '../../styles/mixins/common';

  page {
    height: 100%;
  }

  .home-search-wrap {
    padding: 15px 10px;
  }

  .home-search {
    .flex-v-center();
    padding-left: 15px;
    background-color: #fff;
    border-radius: 30px;
    overflow: hidden;
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
  }

  .search-input {
    width: 100%;
    padding: 10px 15px 10px 8px;
    height: 40px;
  }

  .home-banner {
    position: relative;
    height: 118px;
    margin-left: 10px;
    margin-right: 10px;
    overflow: hidden;
    margin-bottom: 10px;
    border-radius: 6px;
    box-shadow: 0 5px 12px rgba(0, 0, 0, 0.08);

    image {
      width: 100%;
      height: 100%;
      display: block;
    }
  }

  .filter-toolbar-wrap {
    position: relative;
    height: 39px;
    z-index: 10;
  }

  .filter-toolbar {
    position: relative;
    z-index: 5;

    &.fixed {
      position: fixed;
      left: 0;
      right: 0;
      top: 0;
      box-shadow: 0 5px 8px rgba(0,0,0,.08);

      .filter-toolbar-inner {
        background-color: #fff;
      }
    }
  }

  .filter-toolbar-inner {
    position: relative;
    .flex-v-center();
    justify-content: space-between;
    padding-left: 10px;
    padding-right: 10px;
    height: 39px;
    z-index: 5;

    &:after {
      margin-left: 20px;
      margin-right: 20px;
    }

    &.expand {
      background-color: #fff;
    }

    .filter-itemtype {
      flex: 1;
      padding-top: 10px;
      padding-bottom: 10px;
      color: #666;
      text-align: center;

      &.selected {
        font-weight: bold;
        color: #333;
      }

      &.sort {
        text-align: left;
        margin-right: 12px;
      }

      &.filter {
        text-align: right;
        &.selected {
          font-weight: normal;
          color: #27a1f8;
        }
      }
    }
  }

  .filter-sublayer {
    position: absolute;
    left: 0;
    top: 100%;
    right: 0;
    background-color: #fff;
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.07);
  }

  .filter-itemsort-wrap {
    padding-bottom: 12px;
  }

  .filter-itemsort {
    padding: 12px;
    .flex();
    justify-content: space-between;

    > icon {
      visibility: hidden;
    }

    &.selected {
      color: #27a1f8;
      > icon {
        visibility: visible;
      }
    }

    &:active {
      background-color: @color-active;
    }
  }

  .filter-catelog {
    padding: 15px 10px 0;
  }

  .filter-catelog-hd {
    margin-bottom: 10px;

    icon {
      margin-right: 3px;
    }

    icon, text {
      vertical-align: middle;
    }
  }

  .filter-catelog-bd {
    margin-bottom: 15px;
  }

  .filter-catelog-item {
    display: inline-block;
    padding: 5px 12px;
    border: .5px solid @color-border;
    border-radius: 30px;
    margin: 0 8px 8px 0;
    color: #666;
    font-size: 13px;

    &.selected {
      //background-color: #daeaf6;
      border-color: @gcolor;
      color: @gcolor;
    }
  }

  .filter-catelog-action {
    .flex();
    box-shadow:0 -8px 18px rgba(0, 0, 0, 0.04);

    > view {
      flex: 1;
      height: 45px;
      .flex-center();
      font-size: 15px;
    }

    .filter-btn-reset {
      border-top: .5px solid @color-gray;

      &:active {
        background-color: @color-active;
      }
    }

    .filter-btn-ok {
      color: #fff;
      .g-gradient();

      &:active {
        .g-darken-gradient();
      }
    }
  }
</style>

<template>
  <view class="home-search-wrap">
    <view class="home-search" @tap="toSearch">
      <icon name="find" custom-style="font-size:18px;color:#999;"></icon>
      <input type="text" class="search-input" placeholder="搜索书名、作者、图书的ISBN号" placeholder-class="input-placeholder" disabled></input>
    </view>
  </view>

  <view class="home-banner">
    <image src="../../assets/images/home_banner.jpg"></image>
  </view>

  <view id="filter_bar" class="filter-toolbar-wrap" @touchmove.stop="true">
    <view class="filter-toolbar" :class="{'fixed': filterBarFixed}">
      <view class="filter-toolbar-inner hairline--bottom" :class="{'expand': filterVisible}">
        <view class="filter-itemtype sort" :class="{'selected': filterVisible && filterType === 'sort'}" @tap="showFilter('sort')">
          <text>{{sortName}}</text>
          <icon size="mini" name="caret-down"></icon>
        </view>
        <view class="filter-itemtype" :class="{'selected': sortType === 2}" @tap="filterBySort(2)">
          <text>人气优先</text>
        </view>
        <view class="filter-itemtype" :class="{'selected': sortType === 4}" @tap="filterBySort(4)">
          <text>新书优先</text>
        </view>
        <view class="filter-itemtype filter" :class="{'selected': filterVisible && filterType === 'catelog'}" @tap="showFilter('catelog')">
          <text>筛选</text>
          <icon size="mini" name="filter-o"></icon>
        </view>
      </view>
      <transition custom-class="filter-sublayer" name="slide-down" duration="300" show="{{filterVisible}}">
        <view class="filter-itemsort-wrap" wx:if="{{filterType === 'sort'}}">
          <block wx:for="{{sortTypes}}" wx:key="index">
            <view class="filter-itemsort" :class="{'selected': item.checked}" @tap="filterBySort({{item.value}})">
              <text>{{item.name}}</text>
              <icon name="check-o"></icon>
            </view>
          </block>
        </view>

        <view class="filter-catelog-wrapper" wx:if="{{filterType === 'catelog'}}">
          <view class="filter-catelog">
            <view class="filter-catelog-hd">
              <icon name="leaf" size="middle" type="svg"></icon>
              <text>年龄</text>
            </view>
            <view class="filter-catelog-bd">
              <block wx:for="{{ageTypes}}" wx:key="index">
                <view class="filter-catelog-item" :class="{'selected': item.checked}" @tap="filterByTag('ageTypes', {{item.value}})">{{item.name}}</view>
              </block>
            </view>
            <view class="filter-catelog-hd">
              <icon name="catelog" size="middle" type="svg"></icon>
              <text>分类</text>
            </view>
            <view class="filter-catelog-bd">
              <block wx:for="{{tags}}" wx:key="index">
                <view class="filter-catelog-item" :class="{'selected': item.checked}" @tap="filterByTag('tags', {{item.value}})">{{item.name}}</view>
              </block>
            </view>
            <view class="filter-catelog-hd">
              <icon name="lang" size="middle" type="svg"></icon>
              <text>语言</text>
            </view>
            <view class="filter-catelog-bd">
              <block wx:for="{{languageTypes}}" wx:key="index">
                <view class="filter-catelog-item" :class="{'selected': item.checked}" @tap="filterByTag('languageTypes', {{item.value}})">{{item.name}}</view>
              </block>
            </view>
          </view>
          <view class="filter-catelog-action">
            <view class="filter-btn-reset" @tap="resetFilter">重置</view>
            <view class="filter-btn-ok" @tap="searchFilter">确定</view>
          </view>
        </view>
      </transition>
    </view>
    <overlay show="{{filterVisible}}" duration="300" mask="true" @tap="hideFilter"></overlay>
  </view>

  <products api="/sales/list" query-params="{{queryParams}}" reset-top="{{filterBarTop + 1}}" @itemtap="viewDetail"></products>

  <gotop />
</template>

<script>
import wepy from 'wepy'
import { getNodeRect } from '../../utils/util'
import { getStore } from 'wepy-redux'

const store = getStore()

export default class Index extends wepy.page {
  config = {
    navigationBarTitleText: '星月童书',
    enablePullDownRefresh: true,
    usingComponents: {
      'transition': '/components/transition/index',
      'overlay': '/components/overlay/index',
      'icon': '/components/icon/index',
      'products': '/components/products/index',
      'gotop': '/components/gotop/index'
    }
  }

  data = {
    filterBarTop: 0,
    filterBarFixed: false,
    filterVisible: false,
    filterType: null,
    queryParams: null,
    sortType: 1,
    ageValue: 0,
    tagValue: 0,
    langValue: 0,
    sortTypes: [
      {checked: true, value: 1, name: '综合排序'},
      {checked: false, value: 2, name: '人气优先'},
      {checked: false, value: 3, name: '好评优先'},
      {checked: false, value: 4, name: '新书优先'},
      {checked: false, value: 5, name: '智能排序'}
    ],
    ageTypes: [
      {checked: true, value: 0, name: '全部'},
      {checked: false, value: 1, name: '0-2岁'},
      {checked: false, value: 2, name: '3-5岁'},
      {checked: false, value: 3, name: '6-8岁'},
      {checked: false, value: 4, name: '8岁以上'}
    ],
    tags: [
      {checked: true, value: 0, name: '全部'},
      {checked: false, value: 1, name: '课外阅读'},
      {checked: false, value: 2, name: '亲子关系'},
      {checked: false, value: 3, name: '历史文学'}
    ],
    languageTypes: [
      {checked: true, value: 0, name: '全部'},
      {checked: false, value: 1, name: '中文'},
      {checked: false, value: 2, name: '中文注音'},
      {checked: false, value: 3, name: '英文'},
      {checked: false, value: 4, name: '中英文'}
    ]
  }

  computed = {
    sortName () {
      return this.sortTypes.find(item => item.value === this.sortType).name
    }
  }

  watch = {
    sortType (newVal) {
      this.sortTypes = this.sortTypes.map(item => {
        return { ...item, checked: item.value === newVal }
      })
    }
  }

  methods = {
    toSearch () {
      this.$navigate('/pages/search/search')
    },
    viewDetail (e) {
      this.$navigate('/pages/detail/detail', {product: JSON.stringify(e.detail.item)})
    },
    showFilter (type) {
      if (!this.filterBarFixed) {
        wx.pageScrollTo({
          scrollTop: this.filterBarTop + 1,
          duration: this.isIOS ? 300 : 0
        })
        setTimeout(() => {
          this.filterVisible = true
          this.filterType = type
          this.$apply()
        }, this.isIOS ? 300 : 0)
      } else {
        if (type === this.filterType) {
          this.filterVisible = !this.filterVisible
        } else {
          this.filterVisible = true
        }
        this.filterType = type
      }
    },
    filterBySort (value) {
      this.filterType = 'sort'
      this.sortType = +value
      this.hideFilterAndSearch()
    },
    filterByTag (type, value) {
      this[type] = this[type].map(item => {
        if (value === 0) {
          if (item.value === 0) {
            item.checked = true
          } else {
            item.checked = false
          }
        } else {
          if (item.value === 0) {
            item.checked = false
          }
          if (item.value === value) {
            item.checked = !item.checked
          }
        }
        return item
      })
    },
    resetFilter () {
      this.ageTypes = this.ageTypes.map(item => ({...item, checked: item.value === this.ageValue}))
      this.tags = this.tags.map(item => ({...item, checked: item.value === this.tagValue}))
      this.languageTypes = this.languageTypes.map(item => ({...item, checked: item.value === this.langValue}))
    },
    searchFilter () {
      this.hideFilterAndSearch()
    }
  }

  hideFilterAndSearch () {
    this.filterVisible = false
    this.loadProducts()
  }

  hideFilter () {
    this.filterVisible = false
  }

  getFilterBarTop() {
    getNodeRect('#filter_bar').then(rect => {
      this.filterBarTop = rect.top
    })
  }

  loadProducts () {
    const filterChecked = list =>
      list.filter(item => item.checked && item.value > 0).map(item => item.value)

    let filter = [
      {
        key: 'ageType',
        values: filterChecked(this.ageTypes)
      },
      {
        key: 'tags',
        values: filterChecked(this.tags)
      },
      {
        key: 'languageType',
        values: filterChecked(this.languageTypes)
      }
    ]

    let sort = [
      {
        key: this.sortType
      }
    ]

    let params = {
      offset: 1,
      limit: 10,
      filter,
      sort
    }

    this.queryParams = params
  }

  onPageScroll (e) {
    let isFixed = false

    if (e.scrollTop > this.filterBarTop) {
      isFixed = true
    }

    if (isFixed !== this.filterBarFixed) {
      this.filterBarFixed = isFixed
      this.$apply()
    }
  }

  onShareAppMessage () {
  }

  onShow () {
    const { recycles, shopCart } = store.getState()
    const recycleCount = recycles.length
    const cartCount = shopCart.reduce((prev, cur) => prev + cur.COUNT, 0)

    if (recycleCount > 0) {
      wx.setTabBarBadge({
        index: 1,
        text: recycleCount.toString()
      })
    } else {
      wx.removeTabBarBadge({
        index: 1
      })
    }

    if (cartCount > 0) {
      wx.setTabBarBadge({
        index: 2,
        text: cartCount.toString()
      })
    } else {
      wx.removeTabBarBadge({
        index: 2
      })
    }
  }

  async onLoad () {
    this.getFilterBarTop()
    this.$parent.ready(() => {
      this.loadProducts()
      this.$apply()
    })
    const sysInfo = await wepy.getSystemInfo()
    this.isIOS = /IOS/i.test(sysInfo.system)
  }
}
</script>
