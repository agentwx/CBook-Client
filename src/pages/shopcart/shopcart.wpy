<style lang="less">
  @import '../../styles/mixins/common';
  @import '../../styles/mixins/ellipsis';

  page {
    padding-bottom: 50px;
  }

  .notice-bar {
    position: fixed;
    left: 0;
    top: 0;
    right: 0;
    z-index: 20;
  }

  .cart-edit-hd {
    .flex-v-center();
    justify-content: space-between;
    padding: 50px 10px 0;
    font-size: 16px;

    .edit-left {
      .flex-v-center();

      .lib-icon {
        margin-right: 5px;
      }

      check-box {
        position: relative;
        top: -1px;
      }
    }
  }

  .cart-checkbox {
    margin-right: 10px;
  }

  .cart-list {
    width: 100%;
    overflow: hidden;
    padding-top: 10px;
    padding-bottom: 10px;
  }

  .cart-panel {
    .flex();
    position: relative;
    padding: 10px;

    &:after {
      margin-left: 20px;
      margin-right: 20px;
    }
  }

  .cart-col-checkbox {
    .flex-v-center();
    min-width: 18px;
  }

  .cart-pd-cover {
    position: relative;
    width: 80px;
    height: 98px;
    margin-right: 10px;

    image {
      width: 100%;
      height: 100%;
    }
  }

  .sold-out-flag {
    position: absolute;
    right: 30px;
    bottom: 30px;
    width: 56px;
    height: 56px;

    image {
      width: 100%;
      height: 100%;
    }
  }

  .cart-pd-main {
    width: 100%;
    overflow: hidden;
    flex: 1;
    .flex();
    flex-direction: column;
    justify-content: space-between;

    .pd-title {
      font-size: 15px;
      font-weight: bold;
      word-wrap: break-word;
      word-break: break-all;
      margin-bottom: 3px;
    }

    .pd-desc {
      .light-font();
      color: #999;
      font-size: 12px;
      .ellipsis();
    }

    .pd-orig-price {
      .light-font();
      color: #777;
      font-size: 13px;
      margin-top: 5px;
    }

    .pd-now-price {
      font-size: 16px;

      .unit {
        font-size: 13px;
      }

      .count {
        margin-left: 15px;
        color: #888;
      }
    }
  }

  .cart-pd-footer {
    .flex();
    justify-content: space-between;
  }

  .pd-dist-price {
    position: relative;
    font-size: 12px;
    padding: 3px 8px;
    margin-left: 8px;
    background-color: @color-active;
    border-radius: 4px;

    &:before {
      position: absolute;
      left: -7px;
      top: 6px;
      content: '';
      width: 0;
      height: 0;
      border-width: 4px;
      border-style: solid solid dashed dashed;
      border-color: @color-active @color-active transparent transparent;
    }
  }

  .empty-layer {
    position: absolute;
    left: 50%;
    top: 50%;
    width: 80%;
    max-width: 320px;
    transform: translate(-50%,-50%);

    image {
      width: 100%;
    }

    .empty-action {
      position: absolute;
      left: 0;
      right: 0;
      bottom: -15px;
      .flex-v-center();
      flex-direction: column;
    }

    .empty-text {
      font-size: 16px;
      color: #888;
    }

    .goshop-btn {
      color: @gcolor;
      margin-top: 15px;
    }
  }


  .cart-action-bar {
    position: fixed;
    left: 0;
    bottom: 0;
    right: 0;
    background-color: #fff;
    height: 50px;
    box-shadow: 0 -8px 18px rgba(0,0,0,.04);
    .flex();
    justify-content: space-between;

    .action-left {
      padding-left: 10px;
      .flex-v-center();

      check-box {
        position: relative;
        top: -1px;
      }
    }

    .action-right {
      .flex();
    }
  }

  .cart-total-info {
    padding-top: 6px;
    padding-right: 10px;
    text-align: right;
  }

  .cart-summary {
    font-size: 15px;
    font-weight: bold;
  }

  .cart-hint {
    color: #999;
    font-size: 12px;
  }

  .cart-buybtn {
    .g-gradient(50%);
    .flex-center();
    color: #fff;
    font-size: 18px;
    padding-left: 30px;
    padding-right: 30px;

    &:active {
      .g-darken-gradient(50%);
    }

    &.disabled {
      color: #666;
      background: @color-disabled;
      pointer-events: none;
    }
  }

  .cart-delbtn {
    .flex-center();
    color: #fff;
    background-color: @color-danger;
    font-size: 18px;
    padding-left: 30px;
    padding-right: 30px;

    &:active {
      background-color: darken(@color-danger, 10%);
    }

    &.disabled {
      color: #666;
      background: @color-disabled;
      pointer-events: none;
    }
  }

  .cart-delete {
    width: 65px;
    height: 100%;
    .flex-center();
    color: #fff;
    background-color: #ff0000;
  }

  .hint-del {
    overflow: visible !important;
    animation: swipe-hint 2.5s 1s cubic-bezier(0.18, 0.89, 0.32, 1);
  }
</style>
<template>
  <block wx:if="{{products.length > 0}}">
    <notice-bar custom-class="notice-bar">
      <text>书费已抵扣{{cutPrice}}元，共{{cutCount}}本，查看抵扣规则</text>
    </notice-bar>

    <view class="cart-edit-hd">
      <view class="edit-left" @tap="toggleSelectAll">
        <check-box custom-class="cart-checkbox" readonly="true" checked="{{isSelectAll}}" />
        <icon name="library" size="20px" custom-class="lib-icon" />
        <text>图书列表</text>
      </view>
      <view class="edit-right">
        <view class="edit-btn" wx:if="{{!isEdit}}" @tap="startEdit">编辑</view>
        <view class="edit-btn" wx:if="{{isEdit}}" @tap="endEdit">完成</view>
      </view>
    </view>

    <view class="cart-list">
      <repeat for="{{products}}" key="index">
        <swipe-cell right-width="60" custom-class="{{isHintDel && index === 0 ? 'hint-del' : ''}}">
          <view class="cart-panel" :class="{'disabled': item.stockNumber === 0, 'hairline--bottom': index < products.length - 1}" @tap="toggleSelect({{item}})">
            <view class="cart-col-checkbox cart-checkbox">
              <check-box readonly="true" checked="{{item.checked}}" />
            </view>
            <view class="cart-pd-cover flex-v-center" @tap.stop="viewDetail({{item.goodsId}})">
              <image src="{{item.smallImageUrl}}" mode="widthFix" lazyload="true"></image>
            </view>
            <view class="cart-pd-main">
              <view class="pd-head">
                <view class="pd-title">{{item.name}}</view>
                <!--<view class="pd-desc">{{item.author}}</view>-->
                <!--<view class="pd-orig-price">原价：￥{{item.price}}</view>-->
              </view>
              <view class="cart-pd-footer">
                <view class="cart-pdft">
                  <text class="pd-dist-price" wx:if="{{item.starDeduction > 0}}">星币已抵扣{{filters.toFixed(item.starDeduction)}}元</text>
                </view>
                <view class="pd-now-price">
                  <text class="unit">￥</text>
                  <text class="price">{{filters.toFixed(item.starPrice)}}</text>
                  <!--<text class="count">x{{item.COUNT}}</text>-->
                </view>
              </view>
              <view class="sold-out-flag" wx:if="{{item.stockNumber === 0}}">
                <image src="../../assets/images/sold-out.png"></image>
              </view>
            </view>
          </view>
          <view slot="right" class="cart-delete" @tap="deleteCartItem({{item.goodsId}})">删除</view>
        </swipe-cell>
      </repeat>
    </view>

    <view class="cart-action-bar">
      <veiw class="action-left" @tap="toggleSelectAll">
        <check-box custom-class="cart-checkbox" readonly="true" checked="{{isSelectAll}}" />
        <text>全选</text>
      </veiw>
      <view class="action-right">
        <view class="cart-total-info">
          <view class="cart-summary">合计￥{{totalPrice}}</view>
          <view class="cart-hint">非偏远地区，满69包邮</view>
        </view>
        <view class="cart-buybtn" :class="{'disabled': totalCount === 0}" wx:if="{{!isEdit}}" @tap="goToBuy">结算({{totalCount}})</view>
        <view class="cart-delbtn" :class="{'disabled': totalCount === 0}" wx:if="{{isEdit}}" @tap="deleteCart">删除({{totalCount}})</view>
      </view>
    </view>
  </block>
  <block wx:else>
    <view class="empty-layer">
      <image src="../../assets/images/cart-empty-bg.png"></image>
      <view class="empty-action">
        <view class="empty-text">购物车空空如也~</view>
        <btn type="plain" custom-class="goshop-btn" @tap="goShopping">去逛逛</btn>
      </view>
    </view>
  </block>

  <notify id="notify" />
</template>

<script>
  import wepy from 'wepy'
  import { confirm } from '../../utils/util'
  import fetch from '../../service/fetch'
  import Notify from '../../components/notify/notify'
  import filters from '../../filters/number.wxs'
  import { connect, getStore } from 'wepy-redux'

  const store = getStore()

  @connect({
    products ({ shopCart, cartProducts: p }) {
      return shopCart.map(item => {
        for (let i = 0; i < p.length; i++) {
          if (item.ID === p[i].goodsId) {
            p[i].COUNT = item.COUNT
            p[i].checked = p[i].checked === undefined ? this.isSelectAll : p[i].checked
            return p[i]
          }
        }
      })
    },
    totalPrice ({ cartProducts }) {
      return cartProducts
        .filter(product => product.checked)
        .reduce((prev, cur) => prev + cur.COUNT * (cur.starPrice || cur.price), 0).toFixed(2)
    },
    totalCount ({ cartProducts }) {
      return cartProducts
        .filter(product => product.checked)
        .reduce((prev, cur) => prev + cur.COUNT, 0)
    },
    cartCount ({ shopCart }) {
      return shopCart.reduce((prev, cur) => prev + cur.COUNT, 0)
    },
    cutCount ({ cartProducts }) {
      return cartProducts
        .filter(product => product.starDeduction)
        .reduce((prev, cur) => prev + cur.COUNT, 0)
    },
    cutPrice ({ cartProducts }) {
      return cartProducts.reduce((prev, cur) => prev + cur.COUNT * cur.starDeduction, 0).toFixed(2)
    }
  })
  export default class Index extends wepy.page {
    config = {
      navigationBarTitleText: '购物车',
      enablePullDownRefresh: true,
      usingComponents: {
        'btn': '/components/button/index',
        'icon': '/components/icon/index',
        'notify': '/components/notify/index',
        'check-box': '/components/check-box/index',
        'notice-bar': '/components/notice-bar/index',
        'swipe-cell': '/components/swipe-cell/index'
      }
    }

    data = {
      isEdit: false,
      isSelectAll: true,
      isHintDel: false
    }

    wxs = {
      filters
    }

    watch = {
      isEdit (value) {
        if (value === true) {
          toggleCart(null, false)
        }
      },
      isSelectAll (value) {
        if (value === true) {
          toggleCart(null, true)
        }
      },
      cartCount () {
        this.setBadge()
      },
      products (value) {
        if (value.length === 0) {
          this.isSelectAll = false
          this.isEdit = false
        }
      }
    }

    methods = {
      viewDetail (goodsId) {
        this.$navigate('/pages/detail/detail', { goodsId })
      },
      goToBuy () {
        const productsToBuy = this.products.filter(product => product.checked)
        const noneStocks = productsToBuy.filter(product => product.stockNumber === 0)
        if (noneStocks.length > 0) {
          return Notify('购物车中有缺货商品，请删除后再下单')
        }
        this.$navigate('/pages/order/order', {orderSource: 'normal', products: JSON.stringify(productsToBuy)})
      },
      goShopping () {
        this.$switch('/pages/home/home')
      },
      toggleSelectAll () {
        this.isSelectAll = !this.isSelectAll
        if (!this.isSelectAll) {
          toggleCart(null, false)
        }
      },
      toggleSelect (item) {
        toggleCart(item.goodsId, !item.checked)
        if (item.checked) {
          this.isSelectAll = false
        } else {
          const notAll = this.products.some(product => !product.checked)
          this.isSelectAll = !notAll
        }
      },
      startEdit () {
        this.isEdit = true
        this.isSelectAll = false
      },
      endEdit () {
        this.isEdit = false
        this.isSelectAll = true
      },
      async deleteCart () {
        const isOK = await confirm('确定要删除吗?')
        if (isOK) {
          this.products.forEach(product => {
            if (product.checked) {
              removeCartAndProduct(product.goodsId)
            }
          })
        }
      },
      async deleteCartItem (goodsId) {
        const isOK = await confirm('确定要删除吗?')
        if (isOK) {
          removeCartAndProduct(goodsId)
        }
      },
      clear () {
        clearCartAndProducts()
      }
    }

    setBadge () {
      if (this.cartCount > 0) {
        wx.setTabBarBadge({
          index: 2,
          text: this.cartCount.toString()
        })
      } else {
        wx.removeTabBarBadge({
          index: 2
        })
      }
    }

    setHintDel () {
      let isHintDel = false
      if (this.products.length > 0) {
        const hintdel = wx.getStorageSync('hintdel.cart')
        if (!hintdel) {
          wx.setStorageSync('hintdel.cart', true)
        }
        isHintDel = !hintdel
      } else {
        isHintDel = false
      }
      this.isHintDel = isHintDel
    }

    async checkStock () {
      const goodsId = this.products.map(product => product.goodsId)
      if (!goodsId.length) return Promise.resolve()
      wx.showNavigationBarLoading()
      const { datas = [] } = await fetch.post('/sales/goods/stock', { goodsId }, false)
      datas.forEach(item => {
        let product = this.products.find(product => product.goodsId === item.goodsId)
        if (product) {
          Object.assign(product, item)
        }
      })
      this.$apply()
      wx.hideNavigationBarLoading()
      wx.stopPullDownRefresh()
    }

    onPullDownRefresh () {
      this.checkStock()
    }

    onShow() {
      if (!this.isEdit) {
        this.isSelectAll = true
      }
      this.setHintDel()
      wx.nextTick(() => {
        this.setBadge()
        this.checkStock()
      })
    }

    onLoad () {
      toggleCart(null, this.isSelectAll)
    }
  }

  function toggleCart (ID, checked) {
    store.dispatch({
      type: 'TOGGLE_CART_PRODUCT',
      payload: {
        ID,
        checked
      }
    })
  }

  function removeCartAndProduct (ID) {
    store.dispatch({
      type: 'REMOVE_CART',
      payload: { ID }
    })
    store.dispatch({
      type: 'REMOVE_CART_PRODUCT',
      payload: { ID }
    })
  }

  function clearCartAndProducts () {
    store.dispatch({
      type: 'CLEAR_CART'
    })
    store.dispatch({
      type: 'CLEAR_CART_PRODUCTS'
    })
  }
</script>
