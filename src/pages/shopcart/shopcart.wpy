<style lang="less">
  @import '../../less/mixin';

  page {
    padding-bottom: 100rpx;
  }

  .cart-edit-hd {
    .flex-v-center();
    justify-content: space-between;
    padding: 40rpx 20rpx 0;
    font-size: 32rpx;

    .edit-left {
      .flex-v-center();

      .lib-icon {
        margin-right: 10rpx;
        font-size: 40rpx;
      }

      chkbox {
        position: relative;
        top: -2rpx;
      }
    }
  }

  .cart-checkbox {
    margin-right: 20rpx;
  }

  .cart-list {
    padding-top: 20rpx;
    padding-bottom: 20rpx;
  }

  .cart-panel {
    padding: 20rpx;
    .flex();
  }

  .cart-col-checkbox {
    .flex-v-center();
    min-width: 36rpx;
  }

  .cart-pd-cover {
    width: 160rpx;
    height: 196rpx;
    margin-right: 20rpx;

    image {
      width: 100%;
      height: 100%;
    }
  }

  .cart-pd-main {
    flex: 1;
    .flex();
    flex-direction: column;
    justify-content: space-between;

    .pd-title {
      font-size: 30rpx;
      font-weight: bold;
      margin-bottom: 6rpx;
    }

    .pd-orig-price {
      color: #888;
      font-size: 26rpx;
    }

    .pd-now-price {
      font-size: 36rpx;

      > .unit {
        font-size: 26rpx;
      }
    }

    .cart-pd-from {
      color: @gcolor;
    }
  }

  .cart-pd-footer {
    .flex();
    justify-content: space-between;
  }

  .cart-pdft {
    .flex();
    .pd-count {
      position: relative;
      margin-left: 20rpx;
      top: 6rpx;
    }
  }

  .empty-layer {
    position: absolute;
    left: 50%;
    top: 50%;
    width: 80%;
    max-width: 640rpx;
    transform: translate(-50%,-50%);

    image {
      width: 100%;
    }

    .empty-action {
      position: absolute;
      left: 0;
      right: 0;
      bottom: -30rpx;
      .flex-v-center();
      flex-direction: column;
    }

    .empty-text {
      font-size: 32rpx;
      color: #888;
    }

    .goshop-btn {
      color: @gcolor;
      margin-top: 30rpx;
    }
  }


  .cart-action-bar {
    position: fixed;
    left: 0;
    bottom: 0;
    right: 0;
    background-color: #fff;
    height: 100rpx;
    box-shadow: 0 -16rpx 36rpx rgba(0,0,0,.04);
    .flex();
    justify-content: space-between;

    .action-left {
      padding-left: 20rpx;
      .flex-v-center();

      chkbox {
        position: relative;
        top: -2rpx;
      }
    }

    .action-right {
      .flex();
    }
  }

  .cart-total-info {
    padding-top: 12rpx;
    padding-right: 20rpx;
    text-align: right;
  }

  .cart-summary {
    font-size: 30rpx;
    font-weight: bold;
    margin-bottom: 6rpx;
  }

  .cart-hint {
    color: #999;
    font-size: 24rpx;
  }

  .cart-buybtn {
    .g-gradient(50%);
    .flex-center();
    color: #fff;
    font-size: 36rpx;
    padding-left: 60rpx;
    padding-right: 60rpx;

    &:active {
      .g-darken-gradient(50%);
    }

    &.disabled {
      color: #666;
      background: @color-disabled;
      pointer-events: none;
    }
  }

  .cart-delbtn {
    .flex-center();
    color: #fff;
    background-color: @color-danger;
    font-size: 36rpx;
    padding-left: 60rpx;
    padding-right: 60rpx;

    &:active {
      background-color: darken(@color-danger, 10%);
    }

    &.disabled {
      color: #666;
      background: @color-disabled;
      pointer-events: none;
    }
  }
</style>
<template>
  <block wx:if="{{products.length > 0}}">
    <noticebar>
      <text>书费已抵扣23.8元，共一本，查看抵扣规则</text>
    </noticebar>

    <view class="cart-edit-hd">
      <view class="edit-left" @tap="toggleSelectAll">
        <chkbox customClass="cart-checkbox" readonly="true" checked="{{isSelectAll}}" />
        <icon name="library" customClass="lib-icon" />
        <text>图书列表</text>
      </view>
      <view class="edit-right">
        <view class="edit-btn" wx:if="{{!isEdit}}" @tap="editCart">编辑</view>
        <view class="edit-btn" wx:if="{{isEdit}}" @tap="quitEditCart">完成</view>
      </view>
    </view>

    <view class="cart-list">
      <repeat for="{{products}}">
        <view class="cart-panel" @tap="toggleSelect({{item}})">
          <view class="cart-col-checkbox cart-checkbox">
            <chkbox readonly="true" checked="{{item.isChecked}}" />
          </view>
          <view class="cart-pd-cover">
            <image src="{{item.smallImageUrl}}" lazyload="true"></image>
          </view>
          <view class="cart-pd-main">
            <view class="pd-head">
              <view class="pd-title">{{item.name}}</view>
              <view class="pd-orig-price">原价：￥{{item.costPrice}}</view>
            </view>
            <view class="cart-pd-footer">
              <view class="cart-pdft">
                <view class="pd-now-price">
                  <text class="unit">￥</text>
                  <text>{{item.price}}</text>
                </view>
                <text class="pd-count">x{{item.COUNT}}</text>
              </view>
              <view class="cart-pd-from">星币价</view>
            </view>
          </view>
        </view>
      </repeat>
    </view>

    <view class="cart-action-bar">
      <veiw class="action-left" @tap="toggleSelectAll">
        <chkbox customClass="cart-checkbox" readonly="true" checked="{{isSelectAll}}" />
        <text>全选</text>
      </veiw>
      <view class="action-right">
        <view class="cart-total-info">
          <view class="cart-summary">合计￥{{totalPrice}}</view>
          <view class="cart-hint">非偏远地区，满69包邮</view>
        </view>
        <view class="cart-buybtn {{totalCount === 0 ? 'disabled' : ''}}" wx:if="{{!isEdit}}" @tap="gotoBuy">结算({{totalCount}})</view>
        <view class="cart-delbtn {{totalCount === 0 ? 'disabled' : ''}}" wx:if="{{isEdit}}" @tap="deleteCart">删除({{totalCount}})</view>
      </view>
    </view>
  </block>
  <block wx:else>
    <view class="empty-layer">
      <image src="../../images/cart-empty-bg.png"></image>
      <view class="empty-action">
        <view class="empty-text">购物车空空如也~</view>
        <btn type="plain" customClass="goshop-btn" @tap="goShopping">去逛逛</btn>
      </view>
    </view>
  </block>
</template>

<script>
  import wepy from 'wepy'
  import { confirm } from '../../utils/util'

  import {getStore} from 'wepy-redux'

  const store = getStore()

  export default class Index extends wepy.page {
    config = {
      navigationBarTitleText: '购物车',
      usingComponents: {
        'btn': '/components/button/index',
        'icon': '/components/icon/index',
        'chkbox': '/components/checkbox/index',
        'noticebar': '/components/noticebar/index'
      }
    }

    components = {
    }

    data = {
      isEdit: false,
      isSelectAll: true,
      products: []
    }

    computed = {
      totalPrice () {
        return this.products
          .filter(product => product.isChecked)
          .reduce((prev, cur) => prev + cur.COUNT * +cur.price, 0).toFixed(2)
      },
      totalCount () {
        return this.products
          .filter(product => product.isChecked)
          .reduce((prev, cur) => prev + cur.COUNT, 0)
      }
    }

    watch = {
      isEdit (newValue) {
        if (newValue === true) {
          this.setProductsChecked(false)
          this.$apply()
        }
      }
    }

    methods = {
      gotoBuy () {
        const productsToBuy = this.products.filter(product => product.isChecked)
        this.$navigate('/pages/order/order', {products: JSON.stringify(productsToBuy)})
      },
      goShopping () {
        this.$switch('/pages/home/home')
      },
      toggleSelectAll () {
        this.isSelectAll = !this.isSelectAll
        this.setProductsChecked(this.isSelectAll)
      },
      toggleSelect (item) {
        this.products = this.products.map(product => {
          if (product.goodsId === item.goodsId) {
            return {...product, isChecked: !product.isChecked}
          } else {
            return product
          }
        })
        if (item.isChecked) {
          this.isSelectAll = false
        } else {
          const notAll = this.products.some(product => !product.isChecked)
          this.isSelectAll = !notAll
        }
      },
      editCart () {
        this.isEdit = true
        this.isSelectAll = false
      },
      quitEditCart () {
        this.isEdit = false
      },
      async deleteCart () {
        const isOK = await confirm('确定要删除吗?')
        if (isOK) {
          this.products = this.products.filter(product => {
            if (product.isChecked) {
              store.dispatch({
                type: 'REMOVE_CART',
                payload: { ID: product.goodsId }
              })
            }
            return !product.isChecked
          })
          if (this.products.length === 0) {
            this.isSelectAll = false
            this.isEdit = false
          }
          this.$apply()
        }
      }
    }

    setProductsChecked (isChecked) {
      this.products = this.products.map(product => ({...product, isChecked: isChecked}))
    }

    getProductsFromCart () {
      let {products, shopcart} = store.getState()

      products = products.list
      this.products = shopcart.list.map(item => {
        for (let i = 0; i < products.length; i++) {
          if (item.ID === products[i].goodsId) {
            products[i].COUNT = item.COUNT
            products[i].isChecked = this.isSelectAll
            return products[i]
          }
        }
      })
    }

    clear () {
      store.dispatch({
        type: 'CLEAR_CART'
      })
      this.products = []
      this.$apply()
    }

    onShow() {
      if (!this.isEdit) {
        this.isSelectAll = true
      }
      this.getProductsFromCart()
    }
  }
</script>
