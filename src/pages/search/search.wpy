<style lang="less">
  @import '../../styles/mixins/common';

  page {
    height: 100%;
  }

  .home-search-wrap {
    width: 100%;
    overflow: hidden;
    .flex-v-center();
    padding: 15px 0 15px 10px;
  }

  .search-cancel {
    color: @gcolor;
    text-align: center;
    white-space: nowrap;
    overflow: hidden;
    width: 0;
    padding: 10px 0 10px 10px;
    transition: all .4s linear;

    &.open {
      width: 60px;
      padding-right: 10px;
    }
  }

  .home-search {
    flex: 1;
    .flex-v-center();
    padding-left: 15px;
    padding-right: 10px;
    background-color: #fff;
    border-radius: 30px;
    overflow: hidden;
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);

    .clear-search {
      padding: 4px;
      margin-top: 2px;
    }
  }

  .search-input {
    width: 100%;
    padding: 10px 0 10px 8px;
    height: 40px;
  }

  .search-sublayer {
    padding: 10px;

    .ssbl-hd {
      .flex-v-center();
      justify-content: space-between;
      margin-bottom: 10px;
      min-height: 28px;
    }

    .ssbl-title {
      font-weight: bold;
    }

    .ssbl-icon {
      padding: 4px;
    }
  }

  .ssr-item {
    display: inline-block;
    padding: 4px 10px;
    border-radius: 30px;
    border: .5px solid @color-border;
    color: #888;
    font-size: 12px;
    margin-right: 8px;
    margin-bottom: 10px;
    min-width: 3.5em;
    text-align: center;

    &:active {
      border-color: darken(@color-border, 10%);
      color: #555;
    }
  }
</style>

<template>
  <view class="home-search-wrap">
    <view class="home-search">
      <icon name="find" custom-style="font-size:18px;color:#999;"></icon>
      <input type="text" class="search-input" placeholder="搜索书名、作者、图书的ISBN号" placeholder-class="input-placeholder" value="{{searchVal}}" focus="true" @focus="hideSearch" @input="onSearchChange" @confirm="doSearch" confirm-type="search" />
      <view class="clear-search" hidden="{{isSearchEmpty}}" @tap="clearSearch">
        <icon name="close-circle" color="#999"></icon>
      </view>
    </view>
    <view class="search-cancel" :class="{'open': !isSearchShow}" @tap="cancelSearch">取消</view>
  </view>

  <view class="search-sublayer" wx:if="{{!isSearchShow}}">
    <view class="ssbl-hd">
      <text class="ssbl-title">历史搜索</text>
      <view class="ssbl-icon" @tap="clearHistory" wx:if="{{history.length > 0}}">
        <icon name="trash"></icon>
      </view>
    </view>
    <view class="search-history">
      <repeat for="{{history}}" key="index">
        <view class="ssr-item" @tap="doSearchByTag({{item}})">{{item}}</view>
      </repeat>
    </view>
  </view>

  <view hidden="{{!isSearchShow}}">
    <products api="/sales/search" query-params="{{queryParams}}" @success="searchSuccess" @itemtap="viewDetail"></products>
  </view>

  <gotop />
</template>

<script>
  import wepy from 'wepy'
  import { toast } from '../../utils/util'
  import { connect, getStore } from 'wepy-redux'

  const store = getStore()

  @connect({
    history ({ history }) {
      return history
    }
  })
  export default class Index extends wepy.page {
    config = {
      navigationBarTitleText: '星月童书',
      enablePullDownRefresh: true,
      usingComponents: {
        'icon': '/components/icon/index',
        'products': '/components/products/index',
        'gotop': '/components/gotop/index'
      }
    }

    data = {
      queryParams: null,
      isSearchShow: false,
      searchVal: ''
    }

    computed = {
      isSearchEmpty () {
        return this.searchVal === ''
      }
    }

    methods = {
      hideSearch () {
        this.isSearchShow = false
      },
      viewDetail (e) {
        this.$navigate('/pages/detail/detail', {product: JSON.stringify(e.detail.item)})
      },
      onSearchChange (e) {
        this.searchVal = e.detail.value
      },
      doSearch () {
        this.loadProducts(this.searchVal)
      },
      doSearchByTag (name) {
        this.loadProducts(name)
      },
      cancelSearch () {
        this.isSearchShow = true
      },
      clearSearch () {
        this.searchVal = ''
      },
      clearHistory () {
        store.dispatch({
          type: 'CLEAR_HISTORY'
        })
      },
      searchSuccess () {
        store.dispatch({
          type: 'ADD_HISTORY',
          payload: this.searchVal
        })
      }
    }

    loadProducts (key) {
      if (key === '') {
        return toast.error('请输入搜索关键字')
      }

      let params = {
        offset: 1,
        limit: 10,
        key
      }

      this.searchVal = key
      this.isSearchShow = true
      this.queryParams = params
    }
  }
</script>
