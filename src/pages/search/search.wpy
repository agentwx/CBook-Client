<style lang="less">
  @import '../../less/mixin';

  page {
    height: 100%;
  }

  .home-search-wrap {
    width: 100%;
    overflow: hidden;
    .flex-v-center();
    padding: 30rpx 0 30rpx 20rpx;
  }

  .search-cancel {
    color: @gcolor;
    text-align: center;
    white-space: nowrap;
    overflow: hidden;
    width: 0;
    padding: 20rpx 0 20rpx 20rpx;
    -webkit-transition: all .4s linear;
    transition: all .4s linear;

    &.open {
      width: 120rpx;
      padding-right: 20rpx;
    }
  }

  .home-search {
    flex: 1;
    .flex-v-center();
    padding-left: 30rpx;
    padding-right: 20rpx;
    background-color: #fff;
    border-radius: 60rpx;
    overflow: hidden;
    box-shadow: 0 0 40rpx rgba(0, 0, 0, 0.1);

    .clear-search {
      padding: 8rpx;
      margin-top: 4rpx;
    }
  }

  .search-input {
    width: 100%;
    padding: 20rpx 0 20rpx 16rpx;
    height: 80rpx;
  }

  .search-sublayer {
    padding: 20rpx;

    .ssbl-hd {
      .flex-v-center();
      justify-content: space-between;
      margin-bottom: 20rpx;
      min-height: 56rpx;
    }

    .ssbl-title {
      font-weight: bold;
    }

    .ssbl-icon {
      padding: 8rpx;
    }
  }

  .ssr-item {
    display: inline-block;
    padding: 8rpx 20rpx;
    border-radius: 60rpx;
    border: 1rpx solid @color-border;
    color: #888;
    font-size: 24rpx;
    margin-right: 16rpx;
    margin-bottom: 20rpx;

    &:active {
      border-color: darken(@color-border, 10%);
      color: #555;
    }
  }

  .product-panel {
    .flex();
    padding: 20rpx;
  }

  .product-cover {
    width: 240rpx;
    height: 294rpx;
    margin-left: 10rpx;
    margin-right: 30rpx;
    overflow: hidden;

    > image {
      display: block;
      width: 100%;
      height: 100%;
    }
  }

  .product-panel-body {
    flex: 1;
    .flex();
    flex-direction: column;
    justify-content: space-between;

    .product-caption {
      font-size: 30rpx;
      .word-break();
      margin-bottom: 10rpx;
    }

    .product-press {
      .light-font();
      font-size: 24rpx;
      color: #888;
    }

    .product-desc {
      .light-font();
      font-size: 24rpx;
      color: #888;
      margin-top: 6rpx;
      margin-bottom: 12rpx;
    }

    .product-tags {
      margin-top: 16rpx;
    }
  }

  .product-subinfo {
    .flex-v-center();

    .product-price {
      font-size: 32rpx;
      color: #eb5a21;

      .unit {
        font-size: 24rpx;
        margin-right: 6rpx;
      }
    }

    .product-tax {
      color: #27a1f8;
    }

    .split {
      width: 0;
      display: inline-block;
      border-left: 1rpx solid #ddd;
      margin-left: 16rpx;
      margin-right: 16rpx;
      height: 30rpx;
    }
  }

  .search-empty {
    .flex-center();
    color: #999;
    margin-top: 160rpx;

    icon {
      margin-right: 20rpx;
    }
  }
</style>
<template>
  <view class="home-search-wrap">
    <view class="home-search">
      <icon name="find" custom-style="font-size: 36rpx;color: #888;"></icon>
      <input type="text" class="search-input" placeholder="搜索书名、作者、图书的ISBN号" placeholder-class="input-placeholder" value="{{searchVal}}" focus="true" @focus="hideSearch" @input="onSearchChange" @confirm="doSearch" confirm-type="search" />
      <view class="clear-search" hidden="{{isSearchEmpty}}" @tap="clearSearch">
        <icon name="close-circle" color="#888"></icon>
      </view>
    </view>
    <view class="search-cancel {{!isSearchShow ? 'open' : ''}}" @tap="cancelSearch">取消</view>
  </view>

  <view class="search-sublayer" wx:if="{{!isSearchShow}}">
    <view class="ssbl-hd">
      <text class="ssbl-title">历史搜索</text>
      <view class="ssbl-icon" @tap="clearHistory" wx:if="{{historyTags.length > 0}}">
        <icon name="trash"></icon>
      </view>
    </view>
    <view class="search-history">
      <repeat for="{{historyTags}}">
        <view class="ssr-item" @tap="doSearchByTag({{item}})">{{item}}</view>
      </repeat>
    </view>
  </view>

  <view class="product-listview" hidden="{{!isSearchShow}}">
    <repeat for="{{products}}">
      <view class="product-panel" @tap="viewDetail({{item}})">
        <view class="product-cover">
          <image src="{{item.smallImageUrl}}" lazyload="true"></image>
        </view>
        <view class="product-panel-body">
          <view class="product-maininfo">
            <view class="product-caption">{{item.name}}</view>
            <view class="product-press">{{item.author}}</view>
            <view class="product-desc">{{item.press}}</view>
            <raty value="{{item.doubanScore}}"></raty>
            <view class="product-tags">
              <repeat for="{{item.tags}}">
                <tag>{{item}}</tag>
              </repeat>
            </view>
          </view>
          <view class="product-subinfo">
            <view class="product-price">
              <text class="unit">￥</text>
              <text>{{item.costPrice}}</text>
            </view>
            <view class="split"></view>
            <view class="product-tax">
              星币价 ￥{{item.price}}
            </view>
          </view>
        </view>
      </view>
    </repeat>
  </view>

  <view class="search-empty" wx:if="{{isLoading === false && isSearchShow && products.length === 0}}">
    <icon name="empty" size="large"></icon>
    <text>抱歉，未查询到相关内容!</text>
  </view>

  <weui-loading visible="{{isLoading}}"></weui-loading>
  <modal-spinner wx:if="{{isLoading && isModalSpinShow}}" />
</template>

<script>
  import wepy from 'wepy'
  import fetch from '../../service/fetch'
  import { toast } from '../../utils/util'
  import History from '../../service/history'
  import { getStore } from 'wepy-redux'

  const store = getStore()

  export default class Index extends wepy.page {
    config = {
      navigationBarTitleText: '星月童书',
      enablePullDownRefresh: true,
      usingComponents: {
        'modal-spinner': '/components/modal-spinner/index',
        'weui-loading': '/components/weui-loading/index',
        'raty': '/components/raty/index',
        'icon': '/components/icon/index',
        'tag': '/components/tag/index'
      }
    }

    components = {
    }

    history = new History('home_search')

    data = {
      isLoading: null,
      isSearchShow: false,
      isModalSpinShow: false,
      searchVal: '',
      historyTags: [],
      products: []
    }

    computed = {
      isSearchEmpty () {
        return this.searchVal === ''
      }
    }

    methods = {
      hideSearch () {
        this.isSearchShow = false
      },
      viewDetail (item) {
        this.$navigate('/pages/detail/detail', item)
      },
      onSearchChange (e) {
        this.searchVal = e.detail.value
      },
      doSearch () {
        this.reloadProducts()
      },
      doSearchByTag (name) {
        this.reloadProducts(name)
      },
      cancelSearch () {
        this.isSearchShow = true
      },
      clearSearch () {
        this.searchVal = ''
      },
      clearHistory () {
        this.history.clear()
        this.historyTags = this.history.getAll()
      }
    }

    async loadProducts (key) {
      let params = {
        offset: this.pageNum,
        limit: 10,
        key
      }

      if (key === '') {
        return toast.error('请输入搜索关键字')
      }

      try {
        this.searchVal = key
        this.isSearchShow = true
        this.isLoading = true
        let res = await fetch.post('/sales/search', params, false)
        let items = res.datas.Items || []
        if (this.pageNum === 1) {
          this.products = items
        } else {
          this.products = this.products.concat(items)
        }
        this.history.add(key)
        this.historyTags = this.history.getAll()
        store.dispatch({
          type: 'ADD_PRODUCTS',
          payload: {products: items}
        })
        if (items.length > 0) {
          this.pageNum++
        }
      } finally {
        this.isLoading = false
        this.isModalSpinShow = false
        this.$apply()
      }
    }

    async reloadProducts (key = this.searchVal) {
      this.pageNum = 1
      await this.loadProducts(key)
    }

    onReachBottom () {
      this.loadProducts(this.searchVal)
    }

    async onPullDownRefresh () {
      if (this.searchVal === '') {
        return wx.stopPullDownRefresh()
      }
      this.isModalSpinShow = true
      await this.reloadProducts()
      wx.stopPullDownRefresh()
    }

    onShareAppMessage () {
    }

    onLoad() {
      this.historyTags = this.history.getAll()
    }
  }
</script>
